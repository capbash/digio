#!/usr/bin/env bash

VERSION=v0.7
API_URL=https://api.digitalocean.com/v2
DROPLET_URL=$API_URL/droplets

#--------------------
# LOGGING SECTION
#--------------------

# Black        0;30     Dark Gray     1;30
# Blue         0;34     Light Blue    1;34
# Green        0;32     Light Green   1;32
# Cyan         0;36     Light Cyan    1;36
# Red          0;31     Light Red     1;31
# Purple       0;35     Light Purple  1;35
# Brown/Orange 0;33     Yellow        1;33
# Light Gray   0;37     White         1;37

# MAC has different names
if [[ `uname` == "Darwin" ]]; then
  BLUE='\x1B[0;34m'
  LIGHT_GREY='\x1B[0;37m'
  DARK_RED='\x1B[1;31m'
  LIGHT_RED='\x1B[0;31m'
  LIGHT_GREEN='\x1B[0;32m'
  NC='\x1B[0m' # No Color
else
  BLUE='\e[0;34m'
  LIGHT_GREY='\e[0;37m'
  DARK_RED='\e[1;31m'
  LIGHT_RED='\e[0;31m'
  LIGHT_GREEN='\e[0;32m'
  NC='\e[0m' # No Color
fi

exec 3>&2 # logging stream (file descriptor 3) defaults to STDERR

DEBUG_LEVEL=0
INFO_LEVEL=1
WARNING_LEVEL=2
ERROR_LEVEL=3
FATAL_LEVEL=4

error() { log $ERROR_LEVEL "  ${DARK_RED}ERROR${NC}   [${LIGHT_GREEN}$(date +"%Y-%m-%d %H:%M:%S")${NC}] ${DARK_RED}$1${NC}"; }
warn() { log $WARNING_LEVEL "  ${LIGHT_RED}WARNING${NC} [${LIGHT_GREEN}$(date +"%Y-%m-%d %H:%M:%S")${NC}] ${LIGHT_RED}$1${NC}"; }
notify() { log $INFO_LEVEL "  ${BLUE}INFO${NC}    [${LIGHT_GREEN}$(date +"%Y-%m-%d %H:%M:%S")${NC}] $1${NC}"; }
info() { log $INFO_LEVEL "  ${BLUE}INFO${NC}    [${LIGHT_GREEN}$(date +"%Y-%m-%d %H:%M:%S")${NC}] $1${NC}"; }
debug() { log $DEBUG_LEVEL "  ${LIGHT_GREY}DEBUG${NC}   [${LIGHT_GREEN}$(date +"%Y-%m-%d %H:%M:%S")${NC}] ${LIGHT_GREY}$1${NC}"; }

error_all() { [[ "$1" != "/dev/null" ]] && (tail -n 100 $1 > $1.last ; while read line; do error "$line" ; done < $1.last ;) }
warn_all() { [[ "$1" != "/dev/null" ]] && (tail -n 100 $1 > $1.last ; while read line; do warn "$line" ; done < $1.last ;) }
notify_all() { [[ "$1" != "/dev/null" ]] && (tail -n 100 $1 > $1.last ; while read line; do notify "$line" ; done < $1.last ;) }
debug_all() { [[ "$1" != "/dev/null" ]] && (tail -n 100 $1 > $1.last ; while read line; do debug "$line" ; done < $1.last ;) }

blue() { pp "${BLUE}$1${NC}"; }
grey() { pp "${LIGHT_GREY}$1${NC}"; }
red() { pp "${DARK_RED}$1${NC}"; }
green() { pp "${LIGHT_GREEN}$1${NC}"; }
black() { pp "$1"; }

log() {
  LOGLEVEL=${LOGLEVEL-$INFO_LEVEL}
  if [ "$LOGLEVEL" -le "$1" ] && [ ! -z "$2" ]; then
    pp "$2"
  fi
}

pp() {
  if [[ `uname` == "Darwin" ]]; then
    echo -e "$1" >&3
  else
    # Expand escaped characters, wrap at 70 chars, indent wrapped lines
    echo -e "$1" | sed '2~1s/^/  /' >&3
  fi
}


#--------------------
# INSATLLER
#--------------------

install_digitalocean()
{
  NAME=$1

  mkdir -p $NAME
  (
    cd $NAME && \
    git init && \
    mkdir -p ./bits && \
    touch ./bits/.gitkeep && \
    touch .gitignore && \
    echo "assets" >> .gitignore && \
    echo "nodes" >> .gitignore && \
    git add . && \
    git commit -m "Initial commit"
  )
  (
    cd $NAME && \
    [[ `git ls-remote --quiet bootstrap 2>/dev/null` == "" ]] && \
    git remote add bootstrap https://github.com/digitalocean/digitalocean-bootstrap.git
  )
  (
    cd $NAME && \
    git subtree add --prefix=bits/bootstrap --squash bootstrap master && \
    ./bits/bootstrap/bootstrap
  )
}

usage()
{
  printf "%b" "${BLUE}
=============================
 DIGIO $VERSION A Bash Implementation
 Of the Digital Ocean API

 More information about the API at
 https://developers.digitalocean.com/documentation/v2/
=============================
${NC}

Usage

  ${BLUE}digio${NC} ${LIGHT_GREEN}[action]${NC}

API Actions.

  ${LIGHT_GREEN}create${NC}        ${DARK_GREY}- Create a new digitalocean droplet (by NAME)${NC}
  ${LIGHT_GREEN}delete${NC}        ${DARK_GREY}- Delete a new digitalocean droplet (by ID)${NC}
  ${LIGHT_GREEN}list <item>${NC}   ${DARK_GREY}- List all droplets (use this to grab your droplet IDs${NC}
  ${LIGHT_GREEN}   droplets${NC}
  ${LIGHT_GREEN}   droplets${NC}


Other Actions

  ${LIGHT_GREEN}update-self${NC}   ${DARK_GREY}- Upgrade to latest version${NC}
  ${LIGHT_GREEN}version${NC}       ${DARK_GREY}- Display just version information, like 'DIGIO $VERSION'${NC}
  ${LIGHT_GREEN}help${NC}          ${DARK_GREY}- Show this message${NC}

${LIGHT_GREY}
For reporting issues, please contact aforward@gmail.com, or
reporting directly against the project at https://github.com/capbash/digio
${NC}
"
}

do_help()
{
  case "$1" in
  "create")
    info "Create a new droplet..."
    ;;
  "list")
    info "Show 'droplets' (default), and 'keys'."
    ;;
  *)
    usage
    ;;
  esac
}

#--------------------
# API CALLS
#--------------------

do_verify_token()
{
  if [[ "$1" = "" ]]; then
    error "Please provide a digital ocean token, e.g. TOKEN=983339f14aaaxx94ex6xd49f17797af8f33fd9f39f8ff1xx74397ef83d791787"
    error "For more information, please checkout https://www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-api-v2"
    exit 1
  fi
}

do_create()
{
  TOKEN=${TOKEN}
  NAME=$1
  REGION=${REGION-tor1}
  SIZE=${SIZE-512mb}
  IMAGE=${IMAGE-ubuntu-14-04-x64}
  SSH_KEYS=${SSH_KEYS-default}
  BACKUPS=${BACKUPS-false}
  IPV6=${IPV6-true}
  USER_DATA=${USER_DATA-null}
  PRIVATE_NETWORKING=${PRIVATE_NETWORKING-true}
  LOGFILE=${LOGFILE-/tmp/digio.log}

  do_verify_token $TOKEN

  info "Creating a new droplet $NAME ($REGION, $SIZE, $IMAGE)"

  if [[ "$SSH_KEYS" = "default" ]]; then
    error "Please provide your SSH_KEY 'ID', default not yet supported"
    exit 1
  fi

  debug "  -- NAME=$NAME"
  debug "  -- REGION=$REGION"
  debug "  -- SIZE=$SIZE"
  debug "  -- IMAGE=$IMAGE"
  debug "  -- SSH_KEYS=$SSH_KEYS"
  debug "  -- BACKUPS=$BACKUPS"
  debug "  -- IPV6=$IPV6"
  debug "  -- USER_DATA=$USER_DATA"
  debug "  -- PRIVATE_NETWORKING=$PRIVATE_NETWORKING"
  ANSWER=$(curl -X POST $DROPLET_URL \
           -d "{\"name\":\"$NAME\", \"region\":\"$REGION\",\"size\":\"$SIZE\",\"image\":\"$IMAGE\", \"ssh_keys\": [ $SSH_KEYS ], \"backups\": $BACKUPS, \"ipv6\": $IPV6, \"user_data\": $USER_DATA, \"private_networking\": $PRIVATE_NETWORKING}" \
           -H "Authorization: Bearer $TOKEN" \
           -H "Content-Type: application/json" 2> $LOGFILE)
  if [ $? -ne 0 ] ; then
    error "Unable to create droplet $NAME ($REGION, $SIZE, $IMAGE)"
    error "Reply: $ANSWER"
    error_all $LOGFILE
    exit 1
  fi
  info "Reply: $ANSWER"
}

do_delete()
{
  ID=$1
  TOKEN=${TOKEN}
  LOGFILE=${LOGFILE-/tmp/digio.log}

  info "Deleting a droplet $ID"
  ANSWER=$(curl -X DELETE $DROPLET_URL/$ID \
           -H "Authorization: Bearer $TOKEN" \
           -H "Content-Type: application/json" 2> $LOGFILE)
  if [ $? -ne 0 ] ; then
    error "Unable to delete droplet $ID"
    error "Reply: $ANSWER"
    error_all $LOGFILE
    exit 1
  fi
  info "Reply: $ANSWER"
}

do_list()
{
  do_verify_token $TOKEN
  ITEM=${1-droplets}
  debug "Looking up $ITEM"
  case "$ITEM" in
  "droplets")
    do_ls_droplets
    ;;
  "keys")
    do_ls_keys
    ;;
  esac
}

do_ls_droplets()
{
  TOKEN=${TOKEN}
  LOGFILE=${LOGFILE-/tmp/digio.log}

  ANSWER=$(curl -X GET $DROPLET_URL \
           -H "Authorization: Bearer $TOKEN" \
           -H "Content-Type: application/json" 2> $LOGFILE)
  if [ $? -ne 0 ] ; then
    error "Unable to list droplets"
    error "Reply: $ANSWER"
    error_all $LOGFILE
    exit 1
  fi
  info "$ANSWER"
}

do_ls_keys()
{
  TOKEN=${TOKEN}
  LOGFILE=${LOGFILE-/tmp/digio.log}

  ANSWER=$(curl -X GET $API_URL/account/keys \
           -H "Authorization: Bearer $TOKEN" \
           -H "Content-Type: application/json" 2> $LOGFILE)
  if [ $? -ne 0 ] ; then
    error "Unable to list droplets"
    error "Reply: $ANSWER"
    error_all $LOGFILE
    exit 1
  fi
  info "$ANSWER"
}

#--------------------
# COMMAND LINE PARSER
#--------------------

case "$1" in
"create")
  do_create $2
  ;;
"delete")
  do_delete $2
  ;;
"list")
  do_list $2
  ;;
"help")
  do_help $2
  ;;
"version")
  echo -e "${BLUE}DIGIO ${VERSION}${NC}"
  exit 0
  ;;
"update-self")
  current_digitalocean_filename=$(which digio)
  OLD_VERION=`digio version`
  curl -s -o $current_digitalocean_filename https://raw.githubusercontent.com/capbash/digio/master/digio
  NEW_VERSION=`digio version`
  current_digitalocean_filename=$(which digio)

  if [[ "$OLD_VERION" = "$NEW_VERSION" ]]; then
    info "Already at the latest version $NEW_VERSION (${current_digitalocean_filename})"
  else
    info "Updated ${current_digitalocean_filename} to $NEW_VERSION (from $OLD_VERION)"
  fi
  ;;
*)
  usage
  exit 0
  ;;
esac

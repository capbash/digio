#!/usr/bin/env bash

#--------------------
# LOGGING SECTION
#--------------------

# Black        0;30     Dark Gray     1;30
# Blue         0;34     Light Blue    1;34
# Green        0;32     Light Green   1;32
# Cyan         0;36     Light Cyan    1;36
# Red          0;31     Light Red     1;31
# Purple       0;35     Light Purple  1;35
# Brown/Orange 0;33     Yellow        1;33
# Light Gray   0;37     White         1;37

# MAC has different names
if [[ `uname` == "Darwin" ]]; then
  BLUE='\x1B[0;34m'
  LIGHT_GREY='\x1B[0;37m'
  DARK_RED='\x1B[1;31m'
  LIGHT_RED='\x1B[0;31m'
  LIGHT_GREEN='\x1B[0;32m'
  NC='\x1B[0m' # No Color
else
  BLUE='\e[0;34m'
  LIGHT_GREY='\e[0;37m'
  DARK_RED='\e[1;31m'
  LIGHT_RED='\e[0;31m'
  LIGHT_GREEN='\e[0;32m'
  NC='\e[0m' # No Color
fi

exec 3>&2 # logging stream (file descriptor 3) defaults to STDERR

DEBUG_LEVEL=0
INFO_LEVEL=1
WARNING_LEVEL=2
ERROR_LEVEL=3
FATAL_LEVEL=4

error() { log $ERROR_LEVEL "  ${DARK_RED}ERROR${NC}   [${LIGHT_GREEN}$(date +"%Y-%m-%d %H:%M:%S")${NC}] ${DARK_RED}$1${NC}"; }
warn() { log $WARNING_LEVEL "  ${LIGHT_RED}WARNING${NC} [${LIGHT_GREEN}$(date +"%Y-%m-%d %H:%M:%S")${NC}] ${LIGHT_RED}$1${NC}"; }
notify() { log $INFO_LEVEL "  ${BLUE}INFO${NC}    [${LIGHT_GREEN}$(date +"%Y-%m-%d %H:%M:%S")${NC}] $1${NC}"; }
info() { log $INFO_LEVEL "  ${BLUE}INFO${NC}    [${LIGHT_GREEN}$(date +"%Y-%m-%d %H:%M:%S")${NC}] $1${NC}"; }
debug() { log $DEBUG_LEVEL "  ${LIGHT_GREY}DEBUG${NC}   [${LIGHT_GREEN}$(date +"%Y-%m-%d %H:%M:%S")${NC}] ${LIGHT_GREY}$1${NC}"; }

blue() { pp "${BLUE}$1${NC}"; }
grey() { pp "${LIGHT_GREY}$1${NC}"; }
red() { pp "${DARK_RED}$1${NC}"; }
green() { pp "${LIGHT_GREEN}$1${NC}"; }
black() { pp "$1"; }

log() {
  LOGLEVEL=${LOGLEVEL-$INFO_LEVEL}
  if [ "$LOGLEVEL" -le "$1" ] && [ ! -z "$2" ]; then
    pp "$2"
  fi
}

pp() {
  if [[ `uname` == "Darwin" ]]; then
    echo -e "$1" >&3
  else
    # Expand escaped characters, wrap at 70 chars, indent wrapped lines
    echo -e "$1" | sed '2~1s/^/  /' >&3
  fi
}


#--------------------
# INSATLLER
#--------------------

install_digitalocean()
{
  NAME=$1

  mkdir -p $NAME
  (
    cd $NAME && \
    git init && \
    mkdir -p ./bits && \
    touch ./bits/.gitkeep && \
    touch .gitignore && \
    echo "assets" >> .gitignore && \
    echo "nodes" >> .gitignore && \
    git add . && \
    git commit -m "Initial commit"
  )
  (
    cd $NAME && \
    [[ `git ls-remote --quiet bootstrap 2>/dev/null` == "" ]] && \
    git remote add bootstrap https://github.com/digitalocean/digitalocean-bootstrap.git
  )
  (
    cd $NAME && \
    git subtree add --prefix=bits/bootstrap --squash bootstrap master && \
    ./bits/bootstrap/bootstrap
  )
}

usage()
{
  printf "%b" "${BLUE}
=============================
 DIGIO v0.2 A Bash Implementation
 Of the Digital Ocean API

 More information about the API at
 https://developers.digitalocean.com/documentation/v2/
=============================
${NC}

Usage

  ${BLUE}digio${NC} ${LIGHT_GREEN}[action]${NC}

Available Actions.

  ${LIGHT_GREEN}create${NC}        ${DARK_GREY}- Create a new digitalocean droplet${NC}
  ${LIGHT_GREEN}update-self${NC}   ${DARK_GREY}- Upgrade to latest version${NC}
  ${LIGHT_GREEN}help${NC}          ${DARK_GREY}- Show this message${NC}

${LIGHT_GREY}
For reporting issues, please contact aforward@gmail.com, or
reporting directly against the project at https://github.com/capbash/digio
${NC}
"
}


#--------------------
# COMMAND LINE PARSER
#--------------------

if [[ "$1" == "help" ]]; then
  usage
  exit 0

elif [[ "$1" == "update-self" ]]; then
  current_digitalocean_filename=$(which digio)
  curl -s -o $current_digitalocean_filename https://raw.githubusercontent.com/capbash/digio/master/digio
  echo "Updated $current_digitalocean_filename"

else
  usage
  exit 0
fi
#!/usr/bin/env bash

VERSION=v0.17.0
API_URL=https://api.digitalocean.com/v2

#--------------------
# LOGGING SECTION
#--------------------

# Black        0;30     Dark Gray     1;30
# Blue         0;34     Light Blue    1;34
# Green        0;32     Light Green   1;32
# Cyan         0;36     Light Cyan    1;36
# Red          0;31     Light Red     1;31
# Purple       0;35     Light Purple  1;35
# Brown/Orange 0;33     Yellow        1;33
# Light Gray   0;37     White         1;37

# MAC has different names
if [[ `uname` == "Darwin" ]]; then
  BLUE='\x1B[0;34m'
  LIGHT_GREY='\x1B[0;37m'
  DARK_RED='\x1B[1;31m'
  LIGHT_RED='\x1B[0;31m'
  LIGHT_GREEN='\x1B[0;32m'
  NC='\x1B[0m' # No Color
else
  BLUE='\e[0;34m'
  LIGHT_GREY='\e[0;37m'
  DARK_RED='\e[1;31m'
  LIGHT_RED='\e[0;31m'
  LIGHT_GREEN='\e[0;32m'
  NC='\e[0m' # No Color
fi

exec 3>&2 # logging stream (file descriptor 3) defaults to STDERR

DEBUG_LEVEL=0
INFO_LEVEL=1
WARNING_LEVEL=2
ERROR_LEVEL=3
FATAL_LEVEL=4

error() { log $ERROR_LEVEL "${DARK_RED}$1${NC}"; }
warn() { log $WARNING_LEVEL "${LIGHT_RED}$1${NC}"; }
notify() { log $INFO_LEVEL "${NC}$1${NC}"; }
info() { log $INFO_LEVEL "${NC}$1${NC}"; }
debug() { log $DEBUG_LEVEL "${LIGHT_GREY}$1${NC}"; }

error_all() { [[ "$1" != "/dev/null" ]] && (tail -n 100 $1 > $1.last ; while read line; do error "$line" ; done < $1.last ;) }
warn_all() { [[ "$1" != "/dev/null" ]] && (tail -n 100 $1 > $1.last ; while read line; do warn "$line" ; done < $1.last ;) }
notify_all() { [[ "$1" != "/dev/null" ]] && (tail -n 100 $1 > $1.last ; while read line; do notify "$line" ; done < $1.last ;) }
debug_all() { [[ "$1" != "/dev/null" ]] && (tail -n 100 $1 > $1.last ; while read line; do debug "$line" ; done < $1.last ;) }

blue() { pp "${BLUE}$1${NC}"; }
grey() { pp "${LIGHT_GREY}$1${NC}"; }
red() { pp "${DARK_RED}$1${NC}"; }
green() { pp "${LIGHT_GREEN}$1${NC}"; }
black() { pp "$1"; }

log() {
  LOGLEVEL=${LOGLEVEL-$INFO_LEVEL}
  if [ "$LOGLEVEL" -le "$1" ] && [ ! -z "$2" ]; then
    pp "$2"
  fi
}

pp() {
  if [[ `uname` == "Darwin" ]]; then
    echo -e "$1" >&3
  else
    # Expand escaped characters, wrap at 70 chars, indent wrapped lines
    echo -e "$1" | sed '2~1s/^/  /' >&3
  fi
}

#--------------------
# INSATLLER
#--------------------

install_digitalocean()
{
  NAME=$1

  mkdir -p $NAME
  (
    cd $NAME && \
    git init && \
    mkdir -p ./bits && \
    touch ./bits/.gitkeep && \
    touch .gitignore && \
    echo "assets" >> .gitignore && \
    echo "nodes" >> .gitignore && \
    git add . && \
    git commit -m "Initial commit"
  )
  (
    cd $NAME && \
    [[ `git ls-remote --quiet bootstrap 2>/dev/null` == "" ]] && \
    git remote add bootstrap https://github.com/digitalocean/digitalocean-bootstrap.git
  )
  (
    cd $NAME && \
    git subtree add --prefix=bits/bootstrap --squash bootstrap master && \
    ./bits/bootstrap/bootstrap
  )
}

internal_version()
{
  cat $1 | grep ^VERSION= | awk -F'=' '{print $2}'
}

throw () {
  echo "$*" >&2
  exit 1
}

handle_error()
{
  local RETURN_CODE=$1
  local ANSWER="$2"
  local TITLE="$3"
  local LOGFILE=${LOGFILE-/tmp/dio.log}
  if [ $RETURN_CODE -ne 0 ] ; then
    error $TITLE
    OUTPUT=$(process "$ANSWER")
    error "$OUTPUT"
    error_all $LOGFILE
    exit 1
  fi
}

#--------------------
# HELP
#--------------------

do_help()
{
  case "$1" in
  "init")
    help_init
    ;;
  "account")
    help_account
    ;;
  "actions")
    help_actions
    ;;
  "action")
    help_action
    ;;
  "domains")
    help_domains
    ;;
  "domain")
    shift
    help_domain $@
    ;;
  "create")
    info "Create a new droplet..."
    ;;
  "list")
    info "Show 'droplets' (default), and 'keys'."
    ;;
  *)
    help_usage
    ;;
  esac
}

help_usage()
{
  printf "%b" "${BLUE}
=============================
 dio $VERSION A Bash Implementation
 Of the Digital Ocean API

 More information about the API at
 https://developers.digitalocean.com/documentation/v2/
=============================
${NC}

Usage

  ${BLUE}dio${NC} ${LIGHT_GREEN}[action]${NC}

Account

  ${LIGHT_GREEN}account${NC}                     ${DARK_GREY}- To retrieve a list of all of the domains in your account${NC}

Actions

  ${LIGHT_GREEN}actions${NC}                     ${DARK_GREY}- List all actions on your account${NC}
  ${LIGHT_GREEN}action <ID>${NC}                 ${DARK_GREY}- List details of a specific action on your account${NC}

Domains

  ${LIGHT_GREEN}domains${NC}                     ${DARK_GREY}- List all domains${NC}
  ${LIGHT_GREEN}domain <name>${NC}               ${DARK_GREY}- Retrieve info about domain <name>${NC}
  ${LIGHT_GREEN}domain create <name> <ip>${NC}   ${DARK_GREY}- Create new domain <name> attached to <ip>${NC}
  ${LIGHT_GREEN}domain delete <name>${NC}        ${DARK_GREY}- Delete the domain <name>${NC}

Domain Records

  N/A

Droplets

  ${LIGHT_GREEN}droplets${NC}                   ${DARK_GREY}- List all droplets (use this to grab your droplet IDs${NC}
  ${LIGHT_GREEN}droplet <id>${NC}               ${DARK_GREY}- List details about a droplet by <id>${NC}
  ${LIGHT_GREEN}create <name>${NC}              ${DARK_GREY}- Create a new droplet (by <name>)${NC}
  ${LIGHT_GREEN}clone <IMAGE> <name>${NC}       ${DARK_GREY}- Create a new droplet based on the provided <IMAGE> (by <name>)${NC}

Droplet Actions

  ${LIGHT_GREEN}power on <ID>${NC}              ${DARK_GREY}- Start your droplet${NC}
  ${LIGHT_GREEN}power off <ID>${NC}             ${DARK_GREY}- Turn off your droplet${NC}
  ${LIGHT_GREEN}snapshot <ID> <name>${NC}       ${DARK_GREY}- Create a snapshot of <ID> called <name>${NC}
  ${LIGHT_GREEN}delete${NC}                     ${DARK_GREY}- Delete a new digitalocean droplet (by ID)${NC}
  ${LIGHT_GREEN}ssh <ID>${NC}                   ${DARK_GREY}- SSH into your droploet${NC}

API Queries

  ${LIGHT_GREEN}list keys${NC}                  ${DARK_GREY}- List all SSH Keys assoicated with your account${NC}
  ${LIGHT_GREEN}list droplets${NC}              ${DARK_GREY}- List all droplets (use this to grab your droplet IDs${NC}
  ${LIGHT_GREEN}list images${NC}                ${DARK_GREY}- List all private images${NC}

  ${LIGHT_GREEN}info <ID>${NC}                  ${DARK_GREY}- List details about your droplet${NC}

Other Actions

  ${LIGHT_GREEN}init${NC}                       ${DARK_GREY}- Initialize the local directory to access a digital ocean account${NC}
  ${LIGHT_GREEN}update-self${NC}                ${DARK_GREY}- Upgrade to latest version${NC}
  ${LIGHT_GREEN}version${NC}                    ${DARK_GREY}- Display just version information, like 'dio $VERSION'${NC}
  ${LIGHT_GREEN}help${NC}                       ${DARK_GREY}- Show this message${NC}

${LIGHT_GREY}
For reporting issues, please contact aforward@gmail.com, or
report directly against the project at https://github.com/capbash/dio
${NC}
"
}

help_init()
{
  printf "%b" "${NC}
This will initialize your local directory with environment
variables defaults to make command line operations a little
more palateble.

  ${LIGHT_GREEN}capbash init${NC}

This call will create a .dio file with placeholders for your
account; this includes

  ${LIGHT_GREY}# Digital Ocean will provide you with an access token
  # which authorizes certain activities
  #
  # https://www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-api-v2${NC}
  ${LIGHT_GREEN}TOKEN=XXXX${NC}

  ${LIGHT_GREY}# You can provide your desired SSH_KEY ID for password login
  # https://developers.digitalocean.com/documentation/v2/#ssh-keys
  #
  # You can get more information about your keys by running
  #  > dio list keys
  #
  # It should be provided as a list, do don't forget your square brackets${NC}
  ${LIGHT_GREEN}SSH_KEYS=[1234, 4567]${NC}

"
}

help_account()
{
  printf "%b" "${NC}
This will tell you about your account settings.

  ${LIGHT_GREEN}dio account${NC}

For example,
  ${LIGHT_GREEN}
  droplet_limit: 25
  email: me@myemail.com
  uuid: asfd213asdf
  email_verified: true
  status: active${NC}

"
}

help_domains()
{
  printf "%b" "${NC}
This will tell you about your configured domains

  ${LIGHT_GREEN}dio domains${NC}

Example,

  ${LIGHT_GREEN}domains: mywebsite.com
  ttl: 1800${NC}
  ...
  ${LIGHT_GREEN}domains: anotherwebsite.ca
  ttl: 1800${NC}

"
}

help_domain()
{
  case "$1" in
  "create")
    help_domain_create
    ;;
  "delete")
    help_domain_delete
    ;;
  *)
    help_domain_all
    ;;
  esac
}

help_domain_all()
{
  printf "%b" "${NC}
This will tell you about a particular domain

  ${LIGHT_GREEN}dio domain <name>${NC}

Example,

  ${LIGHT_GREEN}dio domain mywebsite.com${NC}

Would return information similar to

  ${LIGHT_GREEN}[\"domain\",\"name\"] \"mywebsite.com\"
  [\"domain\",\"ttl\"]  1800
  [\"domain\",\"zone_file\"]  \"\$ORIGIN mywebsite.com.
  \$TTL 1800
  mywebsite.com. 1800 IN A 192.1.2.3
  mywebsite.com. 1800 IN NS ns1.digitalocean.com.
  mywebsite.com. 1800 IN NS ns2.digitalocean.com.
  mywebsite.com. 1800 IN NS ns3.digitalocean.com.${NC}

You might also want help on creating and deleting domains,
for that please call

  ${LIGHT_GREEN}dio help domain create${NC}
  ${LIGHT_GREEN}dio help domain delete${NC}

"
}

help_domain_create()
{
  printf "%b" "${NC}
You can create a new domain by

  ${LIGHT_GREEN}dio domain create <name> <ip>${NC}

Example,

  ${LIGHT_GREEN}dio domain create mywebsite.com 127.0.0.0${NC}

"
}

help_domain_delete()
{
  printf "%b" "${NC}
You can delete an existing domain by

  ${LIGHT_GREEN}dio domain delete <name>${NC}

Example,

  ${LIGHT_GREEN}dio domain delete mywebsite.com${NC}

"
}


help_actions()
{
  printf "%b" "${NC}
This will tell you about all actions on your account.

  ${LIGHT_GREEN}PAGE=<n> dio actions${NC}

The ${LIGHT_GREEN}PAGE${NC} variable defaults to 1 if none is provided.

Example actions might be

  ${LIGHT_GREEN}[\"actions\",0,\"id\"]  1234
  [\"actions\",0,\"status\"]  \"completed\"
  [\"actions\",0,\"type\"]  \"rebuild\"
  [\"actions\",1,\"id\"]  98123
  [\"actions\",1,\"status\"]  \"completed\"
  [\"actions\",1,\"type\"]  \"build\"${NC}

"
}

help_action()
{
  printf "%b" "${NC}
This will tell you about a specific action against your account.

  ${LIGHT_GREEN}dio action <ID>${NC}

For example

  ${LIGHT_GREEN}dio action 1234${NC}

Might return

  ${LIGHT_GREEN}[\"actions\",0,\"id\"]  1234
  [\"actions\",0,\"status\"]  \"completed\"
  [\"actions\",0,\"type\"]  \"rebuild\"${NC}

"
}

#--------------------
# JSON PARSER
#--------------------

awk_egrep () {
  local pattern_string=$1

  gawk '{
    while ($0) {
      start=match($0, pattern);
      token=substr($0, start, RLENGTH);
      print token;
      $0=substr($0, start+RLENGTH);
    }
  }' pattern="$pattern_string"
}

process()
{
  echo $1 | tokenize | parse
}

tokenize () {
  local GREP
  local ESCAPE
  local CHAR

  if echo "test string" | egrep -ao --color=never "test" &>/dev/null
  then
    GREP='egrep -ao --color=never'
  else
    GREP='egrep -ao'
  fi

  if echo "test string" | egrep -o "test" &>/dev/null
  then
    ESCAPE='(\\[^u[:cntrl:]]|\\u[0-9a-fA-F]{4})'
    CHAR='[^[:cntrl:]"\\]'
  else
    GREP=awk_egrep
    ESCAPE='(\\\\[^u[:cntrl:]]|\\u[0-9a-fA-F]{4})'
    CHAR='[^[:cntrl:]"\\\\]'
  fi

  local STRING="\"$CHAR*($ESCAPE$CHAR*)*\""
  local NUMBER='-?(0|[1-9][0-9]*)([.][0-9]*)?([eE][+-]?[0-9]*)?'
  local KEYWORD='null|false|true'
  local SPACE='[[:space:]]+'

  $GREP "$STRING|$NUMBER|$KEYWORD|$SPACE|." | egrep -v "^$SPACE$"
}

parse_array () {
  local index=0
  local ary=''
  read -r token
  case "$token" in
    ']') ;;
    *)
      while :
      do
        parse_value "$1" "$index"
        index=$((index+1))
        ary="$ary""$value"
        read -r token
        case "$token" in
          ']') break ;;
          ',') ary="$ary," ;;
          *) throw "EXPECTED , or ] GOT ${token:-EOF}" ;;
        esac
        read -r token
      done
      ;;
  esac
  [ "$BRIEF" -eq 0 ] && value=$(printf '[%s]' "$ary") || value=
  :
}

parse_object () {
  local key
  local obj=''
  read -r token
  case "$token" in
    '}') ;;
    *)
      while :
      do
        case "$token" in
          '"'*'"') key=$token ;;
          *) throw "EXPECTED string GOT ${token:-EOF}" ;;
        esac
        read -r token
        case "$token" in
          ':') ;;
          *) throw "EXPECTED : GOT ${token:-EOF}" ;;
        esac
        read -r token
        parse_value "$1" "$key"
        obj="$obj$key:$value"
        read -r token
        case "$token" in
          '}') break ;;
          ',') obj="$obj," ;;
          *) throw "EXPECTED , or } GOT ${token:-EOF}" ;;
        esac
        read -r token
      done
    ;;
  esac
  [ "$BRIEF" -eq 0 ] && value=$(printf '{%s}' "$obj") || value=
  :
}

parse_value () {
  local jpath="${1:+$1,}$2" isleaf=0 isempty=0 print=0
  case "$token" in
    '{') parse_object "$jpath" ;;
    '[') parse_array  "$jpath" ;;
    # At this point, the only valid single-character tokens are digits.
    ''|[!0-9]) throw "EXPECTED value GOT ${token:-EOF}" ;;
    *) value=$token
       # if asked, replace solidus ("\/") in json strings with normalized value: "/"
       [ "$NORMALIZE_SOLIDUS" -eq 1 ] && value=${value//\\\//\/}
       isleaf=1
       [ "$value" = '""' ] && isempty=1
       ;;
  esac
  [ "$value" = '' ] && return
  [ "$LEAFONLY" -eq 0 ] && [ "$PRUNE" -eq 0 ] && print=1
  [ "$LEAFONLY" -eq 1 ] && [ "$isleaf" -eq 1 ] && [ $PRUNE -eq 0 ] && print=1
  [ "$LEAFONLY" -eq 0 ] && [ "$PRUNE" -eq 1 ] && [ "$isempty" -eq 0 ] && print=1
  [ "$LEAFONLY" -eq 1 ] && [ "$isleaf" -eq 1 ] && \
    [ $PRUNE -eq 1 ] && [ $isempty -eq 0 ] && print=1
  [ "$print" -eq 1 ] && printf "[%s]\t%s\n" "$jpath" "$value"
  :
}

parse () {
  read -r token
  parse_value
  read -r token
  case "$token" in
    '') ;;
    *) throw "EXPECTED EOF GOT $token" ;;
  esac
}

BRIEF=1
LEAFONLY=1
PRUNE=1
NORMALIZE_SOLIDUS=1


#--------------------
# API CALLS
#--------------------

curl_call()
{
  local METHOD=$1
  local URL_PATH=$2

  local TOKEN=${TOKEN}
  local LOGFILE=${LOGFILE-/tmp/dio.log}

  debug "About to $METHOD $API_URL/$URL_PATH"
  local ANSWER=$(curl -X $METHOD $API_URL/$URL_PATH \
                 -H "Authorization: Bearer $TOKEN" \
                 -H "Content-Type: application/json" 2> $LOGFILE)
  echo $ANSWER
}

get_call()
{
  curl_call "GET" "$1"
}

show_call()
{
  ANSWER=$(get_call "$1")
  handle_error $? "$ANSWER" "$2"
  OUTPUT=$(process "$ANSWER")
  notify "$OUTPUT\n"
}



delete_call()
{
  curl_call "DELETE" "$1"
}

post_action()
{
  local ACTION=$2
  local TOKEN=${TOKEN}
  local LOGFILE=${LOGFILE-/tmp/dio.log}

  local ANSWER=$(curl -X POST $API_URL/$1 \
                 -d "{\"type\": \"$ACTION\"}" \
                 -H "Authorization: Bearer $TOKEN" \
                 -H "Content-Type: application/json" 2> $LOGFILE)
  echo $ANSWER
}

read_dio_config()
{
  if [[ -e ".dio" ]]; then
    debug "Reading in configs from .dio"
    . .dio
  else
    debug "No .dio file, skippping"
  fi
}

verify_token()
{
  if [[ "$1" = "" ]]; then
    warn "\nWe were unable to find your Digital Ocean TOKEN, PLEASE TAKE ACTION BELOW.\n"
    info "To provide you token you have have a few options...\n"
    info "  1) Create a .dio config file and edit it to contain your token.\n"
    info "     e.g. ${LIGHT_GREEN}dio init${NC}"
    info "          ${LIGHT_GREEN}echo \"TOKEN=983339f14aaaxx94ex6xd89f17797af8f33fd9f39f8ff1xx74397ef83d791787\" >> .dio${NC}\n"
    info "  2) Put your <TOKEN VALUE> in a TOKEN variable"
    info "     e.g. ${LIGHT_GREEN}TOKEN=983339f14aaaxx94ex6xd89f17797af8f33fd9f39f8ff1xx74397ef83d791787 dio list keys${NC}"
    info "\nIf you have no idea what we are talking about, please check out:"
    info "   https://www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-api-v2"
    info "\nPlease note that 983339f14aaaxx94ex6xd89f17797af8f33fd9f39f8ff1xx74397ef83d791787 is only an example,"
    info "and your token will be much different"
    info "\n"
    exit 1
  fi
}

#--------------------
# API HELPER FUNCTIONS
#--------------------

do_domain()
{
  case "$1" in
  "create")
    shift
    create_domain $@
    ;;
  "delete")
    shift
    info "About to delete domain $1 ..."
    delete_call "domains/$1"
    ;;
  *)
    show_call "domains/$1" "Unable to load information about $1"
    ;;
  esac
}

do_create()
{
  case "$1" in
  "droplet")
    create_droplet $2
    ;;
  *)
    do_create "droplet" $1
    ;;
  esac
}

create_droplet()
{
  TOKEN=${TOKEN}
  NAME=$1
  REGION=${REGION-tor1}
  SIZE=${SIZE-512mb}
  IMAGE=${IMAGE-ubuntu-14-04-x64}
  SSH_KEYS=${SSH_KEYS-""}
  BACKUPS=${BACKUPS-false}
  IPV6=${IPV6-true}
  USER_DATA=${USER_DATA-null}
  PRIVATE_NETWORKING=${PRIVATE_NETWORKING-true}
  LOGFILE=${LOGFILE-/tmp/dio.log}

  verify_token $TOKEN

  if [[ "$SSH_KEYS" = "" ]]; then
    SSH_OUTPUT=""
  else
    SSH_OUTPUT="\"ssh_keys\": $SSH_KEYS, "
  fi

  info "Creating a new droplet $NAME ($REGION, $SIZE, $IMAGE)"

  debug "  -- NAME=$NAME"
  debug "  -- REGION=$REGION"
  debug "  -- SIZE=$SIZE"
  debug "  -- IMAGE=$IMAGE"
  debug "  -- SSH_KEYS=$SSH_KEYS"
  debug "  -- BACKUPS=$BACKUPS"
  debug "  -- IPV6=$IPV6"
  debug "  -- USER_DATA=$USER_DATA"
  debug "  -- PRIVATE_NETWORKING=$PRIVATE_NETWORKING"
  ANSWER=$(curl -X POST $API_URL/droplets \
           -d "{\"name\":\"$NAME\", \"region\":\"$REGION\",\"size\":\"$SIZE\",\"image\":\"$IMAGE\", $SSH_OUTPUT\"backups\": $BACKUPS, \"ipv6\": $IPV6, \"user_data\": $USER_DATA, \"private_networking\": $PRIVATE_NETWORKING}" \
           -H "Authorization: Bearer $TOKEN" \
           -H "Content-Type: application/json" 2> $LOGFILE)

  handle_error $? "$ANSWER" "Unable to create droplet $NAME ($REGION, $SIZE, $IMAGE)"
  OUTPUT=$(process "$ANSWER" | grep 'id\|name'  | grep -v 'kernel' | grep -v 'image' | grep -v 'region' | grep -v 'action' | awk -F' ' '{print $2}')

  info "$OUTPUT"
}

create_domain()
{
  NAME=$1
  IP=$2

  TOKEN=${TOKEN}
  LOGFILE=${LOGFILE-/tmp/dio.log}

  verify_token $TOKEN
  info "Creating a domain $NAME ($IP)"
  ANSWER=$(curl -X POST $API_URL/domains \
           -d "{\"name\":\"$NAME\", \"ip_address\":\"$IP\"}" \
           -H "Authorization: Bearer $TOKEN" \
           -H "Content-Type: application/json" 2> $LOGFILE)
  handle_error $? "$ANSWER" "Unable to create domain $NAME ($IP)"
  OUTPUT=$(process "$ANSWER")
  info "$OUTPUT"
}

do_snapshot()
{
  ID=$1
  NAME=$2
  TOKEN=${TOKEN}
  LOGFILE=${LOGFILE-/tmp/dio.log}

  verify_token $TOKEN

  info "Creating a snapshot $NAME ($ID)"

  ANSWER=$(curl -X POST $API_URL/droplets/$ID/actions \
           -d "{\"type\":\"snapshot\", \"name\":\"$NAME\"}" \
           -H "Authorization: Bearer $TOKEN" \
           -H "Content-Type: application/json" 2> $LOGFILE)

  handle_error $? "$ANSWER" "Unable to create droplet $NAME ($REGION, $SIZE, $IMAGE)"
  OUTPUT=$(process "$ANSWER")
  info "$OUTPUT"
}

do_list()
{
  verify_token $TOKEN
  ITEM=${1-droplets}
  debug "Looking up $ITEM"
  case "$ITEM" in
  "droplets")
    ls_droplets
    ;;
  "keys")
    ls_keys
    ;;
  "images")
    ls_images
    ;;
  esac
}

do_info()
{
  ID=$1
  ANSWER=$(get_call "droplets/$ID")
  handle_error $? "$ANSWER" "Unable to get info about droplet $ID"
  OUTPUT=$(process "$ANSWER")
  notify "$OUTPUT\n"
}

ls_droplets()
{
  ANSWER=$(get_call "droplets")
  handle_error $? "$ANSWER" "Unable to list droplets"
  OUTPUT=$(process "$ANSWER" | grep 'id\|name\|status' | grep -v 'kernel' | grep -v 'image' | grep -v 'region' | awk -F' ' '{print $2}')

  notify "\nAvailable Droplets:\n"
  notify "$OUTPUT\n"
}

ls_droplet()
{
  local ID=$1
  ANSWER=$(get_call "droplets/$ID")
  handle_error $? "$ANSWER" "Unable to list droplet $ID"
  OUTPUT=$(process "$ANSWER" | grep 'id\|name\|status' | grep -v 'kernel' | grep -v 'image' | grep -v 'region' | awk -F' ' '{print $2}')

  notify "\nDroplet Info ($ID):\n"
  notify "$OUTPUT\n"
}

ls_keys()
{
  ANSWER=$(get_call "account/keys")
  handle_error $? "$ANSWER" "Unable to list keys"
  OUTPUT=$(process "$ANSWER" | grep 'id\|name' | awk -F' ' '{print $2}')

  notify "\nAvailable SSH Keys Include:\n"
  notify "$OUTPUT\n"
}

ls_images()
{
  ANSWER=$(get_call "images?page=1&per_page=100&private=true")
  handle_error $? "$ANSWER" "Unable to list images"
  OUTPUT=$(process "$ANSWER")

  notify "\nAvailable Images:\n"
  notify "$OUTPUT\n"
}

do_power()
{
  ON_OR_OFF=$1
  ID=$2
  ANSWER=$(post_action droplets/$ID/actions "power_$ON_OR_OFF")
  OUTPUT=$(process "$ANSWER")
  notify "$OUTPUT\n"
}

do_delete()
{
  case "$1" in
  "droplet")
    info "About to delete droplet $2 ..."
    delete_call "droplets/$2"
    ;;
  *)
    do_delete "droplet" $1
    ;;
  esac
}

do_ssh()
{
  ID=$1
  shift
  ANSWER=$(get_call "droplets/$ID")
  IP=$(process "$ANSWER" | grep 'networks' | grep 'v4' | grep 'ip_address' | grep ',1,' | awk -F' ' '{print $2}' | sed -e 's/^"//'  -e 's/"$//')
  debug "Calling ssh root@$IP"
  ssh root@$IP $@
}

do_init()
{

  if [[ -e ".dio" ]]; then
    warn "dio already initialized, take a look in .dio"
  else
  info "Initalizing dio..."
printf "%b" "# dio $VERSION
# Provide your Digital Ocean TOKEN
# https://www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-api-v2
#
# TOKEN=XXXX
#
# You can provide your desired SSH_KEY ID for password login
# https://developers.digitalocean.com/documentation/v2/#ssh-keys
#
# You can get more information about your keys by running
#  > dio list keys
#
# It should be provided as a list, do don't forget your square brackets
# SSH_KEYS=[1234, 4567]
" > ".dio"
  fi

}

#--------------------
# COMMAND LINE PARSER
#--------------------

read_dio_config
case "$1" in
"account")
  show_call "account" "Unable to load your account information."
  ;;
"actions")
  show_call "actions?page=${PAGE-1}" "Unable to load your actions."
  ;;
"action")
  show_call "actions/$2" "Unable to load action $2."
  ;;
"domains")
  show_call "domains" "Unable to load your domains."
  ;;
"domain")
  shift
  do_domain $@
  ;;
"droplets")
  ls_droplets
  ;;
"droplet")
  ls_droplet "$2"
  ;;
"init")
  do_init
  ;;
"create")
  shift
  do_create $@
  ;;
"clone")
  IMAGE=$2 create_droplet $3
  ;;
"snapshot")
  do_snapshot $2 $3
  ;;
"power")
  do_power $2 $3
  ;;
"delete")
  shift
  do_delete $@
  ;;
"ssh")
  shift
  do_ssh $@
  ;;
"list")
  do_list $2
  ;;
"info")
  do_info $2
  ;;
"help")
  shift
  do_help $@
  ;;
"version")
  echo -e "${BLUE}dio ${VERSION}${NC}"
  exit 0
  ;;
"update-self")
  current_digitalocean_filename=$(which dio)
  OLD_VERSION=$(internal_version $current_digitalocean_filename)
  info "Updating to latest version of dio in ${current_digitalocean_filename}"
  info "When done run '${BLUE}dio version${NC}' for the new version."
  CURLOPT_FRESH_CONNECT=true curl -s -o $current_digitalocean_filename https://raw.githubusercontent.com/capbash/dio/master/dio
  ;;
*)
  help_usage
  exit 0
  ;;
esac

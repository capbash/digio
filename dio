#!/usr/bin/env bash

VERSION=v0.22.0
API_URL=https://api.digitalocean.com/v2

#--------------------
# LOGGING SECTION
#--------------------

# Black        0;30     Dark Gray     1;30
# Blue         0;34     Light Blue    1;34
# Green        0;32     Light Green   1;32
# Cyan         0;36     Light Cyan    1;36
# Red          0;31     Light Red     1;31
# Purple       0;35     Light Purple  1;35
# Brown/Orange 0;33     Yellow        1;33
# Light Gray   0;37     White         1;37

# MAC has different names
if [[ `uname` == "Darwin" ]]; then
  BLUE='\x1B[0;34m'
  LIGHT_GREY='\x1B[0;37m'
  DARK_RED='\x1B[1;31m'
  LIGHT_RED='\x1B[0;31m'
  LIGHT_GREEN='\x1B[0;32m'
  NC='\x1B[0m' # No Color
else
  BLUE='\e[0;34m'
  LIGHT_GREY='\e[0;37m'
  DARK_RED='\e[1;31m'
  LIGHT_RED='\e[0;31m'
  LIGHT_GREEN='\e[0;32m'
  NC='\e[0m' # No Color
fi

exec 3>&2 # logging stream (file descriptor 3) defaults to STDERR

DEBUG_LEVEL=0
INFO_LEVEL=1
WARNING_LEVEL=2
ERROR_LEVEL=3
FATAL_LEVEL=4

error() { log $ERROR_LEVEL "${DARK_RED}$1${NC}"; }
warn() { log $WARNING_LEVEL "${LIGHT_RED}$1${NC}"; }
notify() { log $INFO_LEVEL "${NC}$1${NC}"; }
info() { log $INFO_LEVEL "${NC}$1${NC}"; }
debug() { log $DEBUG_LEVEL "${LIGHT_GREY}$1${NC}"; }

error_all() { [[ "$1" != "/dev/null" ]] && (tail -n 100 $1 > $1.last ; while read line; do error "$line" ; done < $1.last ;) }
warn_all() { [[ "$1" != "/dev/null" ]] && (tail -n 100 $1 > $1.last ; while read line; do warn "$line" ; done < $1.last ;) }
notify_all() { [[ "$1" != "/dev/null" ]] && (tail -n 100 $1 > $1.last ; while read line; do notify "$line" ; done < $1.last ;) }
info_all() { [[ "$1" != "/dev/null" ]] && (tail -n 100 $1 > $1.last ; while read line; do notify "$line" ; done < $1.last ;) }
debug_all() { [[ "$1" != "/dev/null" ]] && (tail -n 100 $1 > $1.last ; while read line; do debug "$line" ; done < $1.last ;) }

blue() { pp "${BLUE}$1${NC}"; }
grey() { pp "${LIGHT_GREY}$1${NC}"; }
red() { pp "${DARK_RED}$1${NC}"; }
green() { pp "${LIGHT_GREEN}$1${NC}"; }
black() { pp "$1"; }

log() {
  LOGLEVEL=${LOGLEVEL-$INFO_LEVEL}
  if [ "$LOGLEVEL" -le "$1" ] && [ ! -z "$2" ]; then
    pp "$2"
  fi
}

pp() {
  if [[ `uname` == "Darwin" ]]; then
    echo -e "$1" >&3
  else
    # Expand escaped characters, wrap at 70 chars, indent wrapped lines
    echo -e "$1" | sed '2~1s/^/  /' >&3
  fi
}

#--------------------
# INSATLLER
#--------------------

internal_version()
{
  cat $1 | grep ^VERSION= | awk -F'=' '{print $2}'
}

throw () {
  echo "$*" >&2
  exit 1
}

handle_error()
{
  local RETURN_CODE=$1
  local ANSWER="$2"
  local TITLE="$3"
  local LOGFILE=${LOGFILE-/tmp/dio.log}
  if [ $RETURN_CODE -ne 0 ] ; then
    error $TITLE
    OUTPUT=$(process "$ANSWER")
    error "$OUTPUT"
    error_all $LOGFILE
    exit 1
  fi
}

#--------------------
# HELP
#--------------------

do_help()
{
  case "$1" in

  # -----------------
  # Account
  # + Get User Information
  # https://developers.digitalocean.com/documentation/v2/#account
  # -----------------
  "account")
    help_account
    ;;


  # -----------------
  # Actions
  # + List All Actions
  # + Retrieve an existing Action
  # https://developers.digitalocean.com/documentation/v2/#actions
  # -----------------
  "actions")
    help_actions
    ;;
  "action")
    help_action
    ;;


  # -----------------
  # Domains
  # + List All Domains
  # + Create a new Domain
  # + Retrieve an existing Domain
  # + Delete a Domain
  # https://developers.digitalocean.com/documentation/v2/#domains
  # -----------------
  "domains")
    help_domains
    ;;
  "domain")
    shift
    help_domain $@
    ;;


  # -----------------
  # Domain Records
  # + List All Domain Records
  # + Create a new Domain Record
  # + Retrieve an existing Domain Record
  # + Update a Domain Record
  # + Delete a Domain Record
  # https://developers.digitalocean.com/documentation/v2/#domains
  # -----------------
  "records")
    help_records
    ;;
  "record")
    shift
    help_record $@
    ;;


  # -----------------
  # Droplets
  # + Create a new Droplet
  # + Retrieve an existing Droplet by Id
  # + List All Droplets
  # + List available Kernels for a Droplet
  # + List snapshots for a Droplet
  # + List backups for a Droplet
  # + List actions for a Droplet
  # + Delete a Droplet
  # + List Neighbors for a Droplet
  # + List all Droplet Neighbors
  # + List Droplet Upgrades
  # https://developers.digitalocean.com/documentation/v2/#droplets
  # -----------------
  "create")
    help_droplet_create
    ;;
  "ls"|"droplets")
    help_droplet_ls
    ;;
  "droplet")
    help_droplet_all
    ;;
  "kernels")
    help_droplet_kernels
    ;;
  "snapshots")
    help_droplet_snapshots
    ;;
  "backups")
    help_droplet_backups
    ;;
  "actions")
    help_droplet_actions
    ;;
  "delete")
    help_droplet_delete
    ;;
  "neighbors"|"neighbours")
    help_droplet_neighbors
    ;;
  "upgrades")
    help_droplet_upgrades
    ;;

  # -----------------
  # Droplets
  # + List all images
  # https://developers.digitalocean.com/documentation/v2/#images
  # -----------------
  "images")
    help_images
    ;;

  "init")
    help_init
    ;;
  *)
    help_usage
    ;;
  esac
}

help_usage()
{
  printf "%b" "${BLUE}
=============================
 dio $VERSION A Bash Implementation
 Of the Digital Ocean API

 More information about the API at
 https://developers.digitalocean.com/documentation/v2/
=============================
${NC}

Usage

  ${LIGHT_GREEN}<options>* dio <action> <args>*${NC}

Available actions are outlined below, type ${LIGHT_GREEN}dio help <action>${NC}
for more details an any of the actions above.

Account

  ${LIGHT_GREEN}account${NC}                                       ${DARK_GREY}- To retrieve a list of all of the domains in your account${NC}

Actions

  ${LIGHT_GREEN}actions${NC}                                       ${DARK_GREY}- List all actions on your account${NC}
  ${LIGHT_GREEN}action <ID>${NC}                                   ${DARK_GREY}- List details of a specific action on your account${NC}

Domains

  ${LIGHT_GREEN}domains${NC}                                       ${DARK_GREY}- List all domains${NC}
  ${LIGHT_GREEN}domain <name>${NC}                                 ${DARK_GREY}- Retrieve info about domain <name>${NC}
  ${LIGHT_GREEN}domain create <name> <ip>${NC}                     ${DARK_GREY}- Create new domain <name> attached to <ip>${NC}
  ${LIGHT_GREEN}domain delete <name>${NC}                          ${DARK_GREY}- Delete the domain <name>${NC}

Domain Records

  ${LIGHT_GREEN}records <domain>${NC}                              ${DARK_GREY}- List all domain records${NC}
  ${LIGHT_GREEN}record <domain> <ID>${NC}                          ${DARK_GREY}- Retrieve info about <domain> record <ID>${NC}
  ${LIGHT_GREEN}record create <domain> <type> <name> <data>${NC}   ${DARK_GREY}- Create new <domain> record${NC}
  ${LIGHT_GREEN}record update <domain> <ID> <field> <value>${NC}   ${DARK_GREY}- Upadte an existing <domain> record${NC}
  ${LIGHT_GREEN}record delete <domain> <ID>${NC}                   ${DARK_GREY}- Delete the <domain> record <ID>${NC}

Droplets

  ${LIGHT_GREEN}<opts> create <name>${NC}                         ${DARK_GREY}- Create a new Droplet${NC}
  ${LIGHT_GREEN}<ID>${NC}                                         ${DARK_GREY}- Retrieve an existing Droplet by <ID>${NC}
  ${LIGHT_GREEN}droplets${NC}                                     ${DARK_GREY}- List all Droplets (use this to locate your Droplet <ID>)${NC}
  ${LIGHT_GREEN}ls${NC}                                           ${DARK_GREY}- Alias to 'dio droplets'${NC}
  ${LIGHT_GREEN}<ID> kernels${NC}                                 ${DARK_GREY}- List all available Kernels for a Droplet${NC}
  ${LIGHT_GREEN}<ID> snapshots${NC}                               ${DARK_GREY}- List snapshots for a Droplet${NC}
  ${LIGHT_GREEN}<ID> backups${NC}                                 ${DARK_GREY}- List backups for a Droplet${NC}
  ${LIGHT_GREEN}<ID> actions${NC}                                 ${DARK_GREY}- List actions for a Droplet${NC}
  ${LIGHT_GREEN}<ID> ip${NC}                                      ${DARK_GREY}- Display the IP for your droplet${NC}
  ${LIGHT_GREEN}delete <ID>${NC}                                  ${DARK_GREY}- Delete a Droplet (by <ID>)${NC}
  ${LIGHT_GREEN}<ID> neighbors${NC}                               ${DARK_GREY}- List Neighbors for a Droplet${NC}
  ${LIGHT_GREEN}neighbors${NC}                                    ${DARK_GREY}- List all Droplet Neighbors${NC}
  ${LIGHT_GREEN}upgrades${NC}                                     ${DARK_GREY}- List Droplet upgrades${NC}

Droplet Actions

  ${LIGHT_GREEN}power on <ID>${NC}                                ${DARK_GREY}- Start your droplet${NC}
  ${LIGHT_GREEN}power off <ID>${NC}                               ${DARK_GREY}- Turn off your droplet${NC}
  ${LIGHT_GREEN}snapshot <ID> <name>${NC}                         ${DARK_GREY}- Create a snapshot of <ID> called <name>${NC}
  ${LIGHT_GREEN}ssh <ID>${NC}                                     ${DARK_GREY}- SSH into your droploet${NC}

Images

  ${LIGHT_GREEN}images${NC}                                       ${DARK_GREY}- List all private images${NC}


API Queries

  ${LIGHT_GREEN}list keys${NC}                                    ${DARK_GREY}- List all SSH Keys assoicated with your account${NC}
  ${LIGHT_GREEN}list droplets${NC}                                ${DARK_GREY}- List all droplets (use this to grab your droplet IDs${NC}
  ${LIGHT_GREEN}info <ID>${NC}                                    ${DARK_GREY}- List details about your droplet${NC}

Regions

  ${LIGHT_GREEN}regions${NC}                                      ${DARK_GREY}- List all regions (e.g. tor1) and their features${NC}

Sizes

  ${LIGHT_GREEN}sizes${NC}                                        ${DARK_GREY}- List all droplet sizes (e.g. 512mb) and their features${NC}

Other Actions

  ${LIGHT_GREEN}init${NC}                                         ${DARK_GREY}- Initialize the local directory to access a digital ocean account${NC}
  ${LIGHT_GREEN}update-self${NC}                                  ${DARK_GREY}- Upgrade to latest version${NC}
  ${LIGHT_GREEN}block-until <status>${NC}                         ${DARK_GREY}- Block the shell until the <status> is reached (e.g. active)${NC}

  ${LIGHT_GREEN}scp <ID> <src> <target>${NC}                      ${DARK_GREY}- Secure copy a file from <src> to your droplet's <target>${NC}
  ${LIGHT_GREEN}ssh <cmd>?${NC}                                   ${DARK_GREY}- SSH into your droplet, or optionally run a common on your droplet${NC}

  ${LIGHT_GREEN}version${NC}                                      ${DARK_GREY}- Display just version information, like 'dio $VERSION'${NC}
  ${LIGHT_GREEN}help${NC}                                         ${DARK_GREY}- Show this message${NC}

${LIGHT_GREY}
For reporting issues, please contact aforward@gmail.com, or
report directly against the project at https://github.com/capbash/dio
${NC}
"
}

help_init()
{
  printf "%b" "${NC}
This will initialize your local directory with environment
variables defaults to make command line operations a little
more palateble.

  ${LIGHT_GREEN}capbash init${NC}

This call will create a .dio file with placeholders for your
account; this includes

  ${LIGHT_GREY}# Digital Ocean will provide you with an access token
  # which authorizes certain activities
  #
  # https://www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-api-v2${NC}
  ${LIGHT_GREEN}TOKEN=XXXX${NC}

  ${LIGHT_GREY}# You can provide your desired SSH_KEY ID for password login
  # https://developers.digitalocean.com/documentation/v2/#ssh-keys
  #
  # You can get more information about your keys by running
  #  > dio list keys
  #
  # It should be provided as a list, do don't forget your square brackets${NC}
  ${LIGHT_GREEN}SSH_KEYS=[1234, 4567]${NC}

"
}

help_account()
{
  printf "%b" "${NC}
Get User Information

  ${LIGHT_GREEN}dio account${NC}

Example response,
  ${LIGHT_GREEN}
  {
    "account": {
      \"droplet_limit\": 25,
      \"email\": \"sammy@digitalocean.com\",
      \"uuid\": \"b6fr89dbf6d9156cace5f3c78dc9851d957381ef\",
      \"email_verified\": true
    }
  }${NC}

"
}

help_actions()
{
  printf "%b" "${NC}
Actions are records of events that have occurred on the resources in
your account. These can be things like rebooting a Droplet, or transferring
an image to a new region.

An action object is created every time one of these actions is initiated.
The action object contains information about the current status of the action,
start and complete timestamps, and the associated resource type and ID.

Every action that creates an action object is available through this endpoint.
Completed actions are not removed from this list and are always available
for querying.

To list all of the actions that have been executed on the current account

  ${LIGHT_GREEN}PAGE=<n> PER_PAGE=<m> dio actions${NC}

This will be the entire list of actions taken on your account, so it will be
quite large. As with any large collection returned by the API, the results
will be paginated (${BLUE}PAGE${NC}) with only 25 on each page (${BLUE}PER_PAGE${NC}) by default .

Example response,
  ${LIGHT_GREEN}
  {
    \"actions\": [
      {
        \"id\": 36804636,
        \"status\": \"completed\",
        \"type\": \"create\",
        \"started_at\": \"2014-11-14T16:29:21Z\",
        \"completed_at\": \"2014-11-14T16:30:06Z\",
        \"resource_id\": 3164444,
        \"resource_type\": \"droplet\",
        \"region\: \"nyc3\",
        \"region_slug\": \"nyc3\"
      }
    ],
    \"links\": {
      \"pages\": {
        \"last\": \"https://api.digitalocean.com/v2/actions?page=159&per_page=1\",
        \"next\": \"https://api.digitalocean.com/v2/actions?page=2&per_page=1\"
      }
    },
    \"meta\": {
      \"total\": 159
    }
  }${NC}

"
}

help_action()
{
  printf "%b" "${NC}
Actions are records of events that have occurred on the resources in
your account. These can be things like rebooting a Droplet, or transferring
an image to a new region.

An action object is created every time one of these actions is initiated.
The action object contains information about the current status of the action,
start and complete timestamps, and the associated resource type and ID.

To retrieve a specific action object

  ${LIGHT_GREEN}dio action <ID>${NC}

For example,

  ${LIGHT_GREEN}dio action 36804636${NC}

Example response,
  ${LIGHT_GREEN}
  {
    \"action\": {
      \"id\": 36804636,
      \"status\": \"completed\",
      \"type\": \"create\",
      \"started_at\": \"2014-11-14T16:29:21Z\",
      \"completed_at\": \"2014-11-14T16:30:06Z\",
      \"resource_id\": 3164444,
      \"resource_type\": \"droplet\",
      \"region\": \"nyc3\",
      \"region_slug\": \"nyc3\"
    }
  }${NC}

"
}

help_domains()
{
  printf "%b" "${NC}
Domain resources are domain names that you have purchased from a
domain name registrar that you are managing through the
DigitalOcean DNS interface.

To retrieve a list of all of the domains in your account

  ${LIGHT_GREEN}dio domains${NC}

Example response,
  ${LIGHT_GREEN}
  {
    \"domains\": [
      {
        \"name\": \"example.com\",
        \"ttl\": 1800,
        \"zone_file\": \"\$ORIGIN example.com.
                      \$TTL 1800
                      example.com. IN SOA ns1.digitalocean.com. hostmaster.example.com. 1415982609 10800 3600 604800 1800
                      example.com. 1800 IN NS ns1.digitalocean.com.
                      example.com. 1800 IN NS ns2.digitalocean.com.
                      example.com. 1800 IN NS ns3.digitalocean.com.
                      example.com. 1800 IN A 1.2.3.4\"
      }
    ],
    \"links\": {
    },
    \"meta\": {
      \"total\": 1
    }
  }${NC}

Actions that affect individual domain records should be taken on
dio domain (${LIGHT_GREEN}dio help domain${NC})

"
}

help_domain()
{
  case "$1" in
  "create")
    help_domain_create
    ;;
  "delete")
    help_domain_delete
    ;;
  *)
    help_domain_all
    ;;
  esac
}

help_domain_create()
{
  printf "%b" "${NC}
To create a new domain.

  ${LIGHT_GREEN}dio domain create <name> <ip_address>${NC}

Set the <name> to the domain name you are adding. Set the <ip_address>
attribute to the IP address you want to point the domain to.

Example response,
  ${LIGHT_GREEN}
  {
    \"domain\": {
      \"name\": \"example.com\",
      \"ttl\": 1800,
      \"zone_file\": null
    }
  }${NC}

"
}

help_domain_all()
{
  printf "%b" "${NC}
To get details about a specific domain

  ${LIGHT_GREEN}dio domain <name>${NC}

Example call,

  ${LIGHT_GREEN}dio domain example.com${NC}

Example response,
  ${LIGHT_GREEN}
  {
    \"domain\": {
      \"name\": \"example.com\",
      \"ttl\": 1800,
      \"zone_file\": \"\$ORIGIN example.com.
                    \$TTL 1800
                    example.com. IN SOA ns1.digitalocean.com. hostmaster.example.com. 1415982611 10800 3600 604800 1800
                    example.com. 1800 IN NS ns1.digitalocean.com.
                    example.com. 1800 IN NS ns2.digitalocean.com.
                    example.com. 1800 IN NS ns3.digitalocean.com.
                    example.com. 1800 IN A 1.2.3.4\"
    }
  }${NC}

To create a new domain,

  ${LIGHT_GREEN}dio domain create <name> <ip_address>${NC}

To delete an existing domain,

  ${LIGHT_GREEN}dio domain delete <name>${NC}

For help on those calls,

  ${LIGHT_GREEN}dio help domain create${NC}
  ${LIGHT_GREEN}dio help domain delete${NC}

"
}

help_domain_delete()
{
  printf "%b" "${NC}
To delete a domain

  ${LIGHT_GREEN}dio domain delete <name>${NC}

The domain will be removed from your account.

Example call,

  ${LIGHT_GREEN}dio domain delete example.com${NC}

"
}

help_records()
{
  printf "%b" "${NC}
Domain record resources are used to set or retrieve information about the
individual DNS records configured for a domain. This allows you to build
and manage DNS zone files by adding and modifying individual records for
a domain.

There is also an additional field called id that is auto-assigned for each
record and used as a unique identifier for requests. For record types that
do not utilize all fields, a value of null will be set for that record.

To get a listing of all records configured for a domain

  ${LIGHT_GREEN}dio records <domain>${NC}

Example call,

  ${LIGHT_GREEN}dio records example.com${NC}


Example response,
  ${LIGHT_GREEN}
  {
    \"domain_records\": [
      {
        \"id\": 3352892,
        \"type\": \"NS\",
        \"name\": \"@\",
        \"data\": \"ns1.digitalocean.com\",
        \"priority\": null,
        \"port\": null,
        \"weight\": null
      },
      {
        \"id\": 3352893,
        \"type\": \"NS\",
        \"name\": \"@\",
        \"data\": \"ns2.digitalocean.com\",
        \"priority\": null,
        \"port\": null,
        \"weight\": null
      },
      {
        \"id\": 3352894,
        \"type\": \"NS\",
        \"name\": \"@\",
        \"data\": \"ns3.digitalocean.com\",
        \"priority\": null,
        \"port\": null,
        \"weight\": null
      },
      {
        \"id\": 3352895,
        \"type\": \"A\",
        \"name\": \"@\",
        \"data\": \"1.2.3.4\",
        \"priority\": null,
        \"port\": null,
        \"weight\": null
      }
    ],
    \"links\": {
    },
    \"meta\": {
      \"total\": 4
    }
  }${NC}

"
}

help_record()
{
  case "$1" in
  "create")
    help_record_create
    ;;
  "update")
    help_record_update
    ;;
  "delete")
    help_record_delete
    ;;
  *)
    help_record_all
    ;;
  esac
}

help_record_create()
{
  printf "%b" "${NC}
To create a new record to a domain

  ${LIGHT_GREEN}PRIORITY=<x> PORT=<y> WEIGHT=<z> dio record create <domain> <type> <name> <data>${NC}

Example call,

  ${LIGHT_GREEN}dio record example.com A www 162.10.66.0${NC}

Example response,
  ${LIGHT_GREEN}
  {
    \"domain_record\": {
      \"id\": 3352896,
      \"type\": \"A\",
      \"name\": \"www\",
      \"data\": \"162.10.66.0\",
      \"priority\": null,
      \"port\": null,
      \"weight\": null
    }
  }${NC}

"
}

help_record_all()
{
  printf "%b" "${NC}
To retrieve a specific domain record

  ${LIGHT_GREEN}dio record <domain> <ID>${NC}

Example call,

  ${LIGHT_GREEN}dio record example.com 3352896${NC}

Example response,
  ${LIGHT_GREEN}
  {
    \"domain_record\": {
      \"id\": 3352896,
      \"type\": \"A\",
      \"name\": \"www\",
      \"data\": \"162.10.66.0\",
      \"priority\": null,
      \"port\": null,
      \"weight\": null
    }
  }${NC}

To create a new record,

  ${LIGHT_GREEN}PRIORITY=<x> PORT=<y> WEIGHT=<z> dio record create <domain> <type> <name> <data>${NC}

To update a existing record,

  ${LIGHT_GREEN}dio record update <domain> <ID> <field> <val>${NC}

To delete an existing record,

  ${LIGHT_GREEN}dio record delete <domain> <ID>${NC}

For help on those calls,

  ${LIGHT_GREEN}dio help record create${NC}
  ${LIGHT_GREEN}dio help record update${NC}
  ${LIGHT_GREEN}dio help record delete${NC}

"
}

help_record_update()
{
  printf "%b" "${NC}
To update an existing record

  ${LIGHT_GREEN}dio record update <domain> <ID> <field> <val>${NC}

Available fields include

|========================================================================================================================|
| Name     | Type     | Description                                                   | Required                         |
|==========+==========+===============================================================+==================================|
| type     | string   | The record type (A, MX, CNAME, etc).                          | All Records                      |
| name     | string   | The host name, alias, or service being defined by the record. | A, AAAA, CNAME, TXT, SRV         |
| data     | string   | Variable data depending on record type.                       | A, AAAA, CNAME, MX, TXT, SRV, NS |
| priority | nullable | number The priority of the host                               | MX, SRV                          |
| port     | nullable | number The port that the service is accessible                | SRV                              |
| weight   | nullable | number The weight of records with the same priority           | SRV                              |
|========================================================================================================================|

Example call,

  ${LIGHT_GREEN}dio record update example.com 3352896 name blog${NC}

Example response,
  ${LIGHT_GREEN}
  {
    \"domain_record\": {
      \"id\": 3352896,
      \"type\": \"A\",
      \"name\": \"blog\",
      \"data\": \"162.10.66.0\",
      \"priority\": null,
      \"port\": null,
      \"weight\": null
    }
  }${NC}

"
}

help_record_delete()
{
  printf "%b" "${NC}
To delete a record for a domain

  ${LIGHT_GREEN}dio record delete <domain> <ID>${NC}

The record will be removed from your account.

Example call,

  ${LIGHT_GREEN}dio record delete example.com 3352896${NC}

"
}

help_droplet_all()
{
  printf "%b" "${NC}
To show an individual droplet

  ${LIGHT_GREEN}dio <ID>${NC}

Example response,
  ${LIGHT_GREEN}
  {
    \"droplet\": {
      \"id\": 3164494,
      \"name\": \"example.com\",
      \"memory\": 512,
      \"vcpus\": 1,
      \"disk\": 20,
      \"locked\": false,
      \"status\": \"active\",
      \"kernel\": {
        \"id\": 2233,
        \"name\": \"Ubuntu 14.04 x64 vmlinuz-3.13.0-37-generic\",
        \"version\": \"3.13.0-37-generic\"
      },
      \"created_at\": \"2014-11-14T16:36:31Z\",
      \"features\": [
        \"ipv6\",
        \"virtio\"
      ],
      \"backup_ids\": [

      ],
      \"snapshot_ids\": [
        7938206
      ],
      \"image\": {
        \"id\": 6918990,
        \"name\": \"14.04 x64\",
        \"distribution\": \"Ubuntu\",
        \"slug\": \"ubuntu-14-04-x64\",
        \"public\": true,
        \"regions\": [
          \"nyc1\",
          \"ams1\",
          \"sfo1\",
          \"nyc2\",
          \"ams2\",
          \"sgp1\",
          \"lon1\",
          \"nyc3\",
          \"ams3\",
          \"nyc3\"
        ],
        \"created_at\": \"2014-10-17T20:24:33Z\",
        \"type\": \"snapshot\",
        \"min_disk_size\": 20
      },
      \"size\": {
      },
      \"size_slug\": \"512mb\",
      \"networks\": {
        \"v4\": [
          {
            \"ip_address\": \"104.131.186.241\",
            \"netmask\": \"255.255.240.0\",
            \"gateway\": \"104.131.176.1\",
            \"type\": \"public\"
          }
        ],
        \"v6\": [
          {
            \"ip_address\": \"2604:A880:0800:0010:0000:0000:031D:2001\",
            \"netmask\": 64,
            \"gateway\": \"2604:A880:0800:0010:0000:0000:0000:0001\",
            \"type\": \"public\"
          }
        ]
      },
      \"region\": {
        \"name\": \"New York 3\",
        \"slug\": \"nyc3\",
        \"sizes\": [
          \"32gb\",
          \"16gb\",
          \"2gb\",
          \"1gb\",
          \"4gb\",
          \"8gb\",
          \"512mb\",
          \"64gb\",
          \"48gb\"
        ],
        \"features\": [
          \"virtio\",
          \"private_networking\",
          \"backups\",
          \"ipv6\",
          \"metadata\"
        ],
        \"available\": true
      }
    }
  }${NC}

"
}

help_droplet_ls()
{
  printf "%b" "${NC}
To list all Droplets in your account

  ${LIGHT_GREEN}dio droplets${NC}

OR,

  ${LIGHT_GREEN}dio ls${NC}

Example response,

  ${LIGHT_GREEN}
  {
    \"droplets\": [
      {
        \"id\": 3164444,
        \"name\": \"example.com\",
        \"memory\": 512,
        \"vcpus\": 1,
        \"disk\": 20,
        \"locked\": false,
        \"status\": \"active\",
        \"kernel\": {
          \"id\": 2233,
          \"name\": \"Ubuntu 14.04 x64 vmlinuz-3.13.0-37-generic\",
          \"version\": \"3.13.0-37-generic\"
        },
        \"created_at\": \"2014-11-14T16:29:21Z\",
        \"features\": [
          \"backups\",
          \"ipv6\",
          \"virtio\"
        ],
        \"backup_ids\": [
          7938002
        ],
        \"snapshot_ids\": [

        ],
        \"image\": {
          \"id\": 6918990,
          \"name\": \"14.04 x64\",
          \"distribution\": \"Ubuntu\",
          \"slug\": \"ubuntu-14-04-x64\",
          \"public\": true,
          \"regions\": [
            \"nyc1\",
            \"ams1\",
            \"sfo1\",
            \"nyc2\",
            \"ams2\",
            \"sgp1\",
            \"lon1\",
            \"nyc3\",
            \"ams3\",
            \"nyc3\"
          ],
          \"created_at\": \"2014-10-17T20:24:33Z\",
          \"type\": \"snapshot\",
          \"min_disk_size\": 20
        },
        \"size\": {
        },
        \"size_slug\": \"512mb\",
        \"networks\": {
          \"v4\": [
            {
              \"ip_address\": \"104.236.32.182\",
              \"netmask\": \"255.255.192.0\",
              \"gateway\": \"104.236.0.1\",
              \"type\": \"public\"
            }
          ],
          \"v6\": [
            {
              \"ip_address\": \"2604:A880:0800:0010:0000:0000:02DD:4001\",
              \"netmask\": 64,
              \"gateway\": \"2604:A880:0800:0010:0000:0000:0000:0001\",
              \"type\": \"public\"
            }
          ]
        },
        \"region\": {
          \"name\": \"New York 3\",
          \"slug\": \"nyc3\",
          \"sizes\": [

          ],
          \"features\": [
            \"virtio\",
            \"private_networking\",
            \"backups\",
            \"ipv6\",
            \"metadata\"
          ],
          \"available\": null
        }
      }
    ],
    \"links\": {
      \"pages\": {
        \"last\": \"https://api.digitalocean.com/v2/droplets?page=3&per_page=1\",
        \"next\": \"https://api.digitalocean.com/v2/droplets?page=2&per_page=1\"
      }
    },
    \"meta\": {
      \"total\": 3
    }
  }${NC}

"
}

help_droplet_create()
{
  printf "%b" "${NC}
To create a new Droplet

  ${LIGHT_GREEN}<options> dio create <name>${NC}

Example call,

  ${LIGHT_GREEN}REGION=nyc3 SIZE=512mb dio create example.com${NC}

Or, if you wanted to create a droplet from a snapshot

  ${LIGHT_GREEN}IMAGE=mysnap dio create snap02${NC}

Here are all the configurable options

  ${BLUE}TOKEN${NC} (should set your default in .dio file (which you can create using ${LIGHT_GREEN}dio init${NC})
  ${BLUE}REGION${NC} (defaults to ${BLUE}tor1${NC} (Go Canda!), see all ${LIGHT_GREEN}dio regions${NC})
  ${BLUE}SIZE${NC} (defaults to ${BLUE}512mb${NC}, see all ${LIGHT_GREEN}dio sizes${NC}, or ${LIGHT_GREEN}dio snapshots${NC})
  ${BLUE}IMAGE${NC} (defaults to ${BLUE}ubuntu-14-04-x64${NC}, see all ${LIGHT_GREEN}dio images${NC})
  ${BLUE}SSH_KEYS${NC} (set your default in .dio file, see all ${LIGHT_GREEN}dio ssh-keys${NC})
  ${BLUE}BACKUPS${NC} (defaults to ${BLUE}false${NC})
  ${BLUE}IPV6${NC} (defaults to ${BLUE}true${NC})
  ${BLUE}USER_DATA${NC} (defaults to ${BLUE}null${NC})
  ${BLUE}PRIVATE_NETWORKING${NC} (defaults to ${BLUE}true${NC})

Any of those options above be defaulted in a local .dio file (type ${LIGHT_GREEN}dio help init${NC} for more details).


Example response,
  ${LIGHT_GREEN}
  {
    \"droplet\": {
      \"id\": 3164494,
      \"name\": \"example.com\",
      \"memory\": 512,
      \"vcpus\": 1,
      \"disk\": 20,
      \"locked\": true,
      \"status\": \"new\",
      \"kernel\": {
        \"id\": 2233,
        \"name\": \"Ubuntu 14.04 x64 vmlinuz-3.13.0-37-generic\",
        \"version\": \"3.13.0-37-generic\"
      },
      \"created_at\": \"2014-11-14T16:36:31Z\",
      \"features\": [
        \"virtio\"
      ],
      \"backup_ids\": [

      ],
      \"snapshot_ids\": [

      ],
      \"image\": {
      },
      \"size\": {
      },
      \"size_slug\": \"512mb\",
      \"networks\": {
      },
      \"region\": {
      }
    },
    \"links\": {
      \"actions\": [
        {
          \"id\": 36805096,
          \"rel\": \"create\",
          \"href\": \"https://api.digitalocean.com/v2/actions/36805096\"
        }
      ]
    }
  }${NC}

"
}

help_droplet_delete()
{
  printf "%b" "${NC}
You can delete an existing Droplet by

  ${LIGHT_GREEN}dio delete <ID>${NC}

Example,

  ${LIGHT_GREEN}dio delete 123432${NC}

"
}

help_droplet_kernels()
{
  printf "%b" "${NC}
To retrieve a list of all kernels available to a Dropet

  ${LIGHT_GREEN}PAGE=n PER_PAGE=m dio <ID> kernels${NC}

You can optionally set which page (defaults to 1) to display, and how many results tokenize
display per page (defaults to 25).

Example call,

  ${LIGHT_GREEN}PAGE=1 PER_PAGE=2 dio 3164494 kernels${NC}

Example response,

  ${LIGHT_GREEN}
  {
    \"kernels\": [
      {
        \"id\": 231,
        \"name\": \"DO-recovery-static-fsck\",
        \"version\": \"3.8.0-25-generic\"
      }
    ],
    \"links\": {
      \"pages\": {
        \"last\": \"https://api.digitalocean.com/v2/droplets/3164494/kernels?page=124&per_page=1\",
        \"next\": \"https://api.digitalocean.com/v2/droplets/3164494/kernels?page=2&per_page=1\"
      }
    },
    \"meta\": {
      \"total\": 124
    }
  }${NC}

"
}

help_droplet_snapshots()
{
  printf "%b" "${NC}
To retrieve the snapshots that have been created from a Droplet

  ${LIGHT_GREEN}PAGE=n PER_PAGE=m dio <ID> snapshots${NC}

You can optionally set which page (defaults to 1) to display, and how many results tokenize
display per page (defaults to 25).

Example call,

  ${LIGHT_GREEN}PAGE=1 PER_PAGE=2 dio 3164494 snapshots${NC}

Example response,
  ${LIGHT_GREEN}
  {
    \"snapshots\": [
      {
        \"id\": 7938206,
        \"name\": \"nginx-fresh\",
        \"distribution\": \"Ubuntu\",
        \"slug\": null,
        \"public\": false,
        \"regions\": [
          \"nyc3\",
          \"nyc3\"
        ],
        \"created_at\": \"2014-11-14T16:37:34Z\",
        \"type\": \"snapshot\",
        \"min_disk_size\": 20
      }
    ],
    \"links\": {
    },
    \"meta\": {
      \"total\": 1
    }
  }${NC}

"
}

help_droplet_backups()
{
  printf "%b" "${NC}
To retrieve any backups associated with a Droplet

  ${LIGHT_GREEN}PAGE=n PER_PAGE=m dio <ID> backups${NC}

You can optionally set which page (defaults to 1) to display, and how many results tokenize
display per page (defaults to 25).

Example call,

  ${LIGHT_GREEN}PAGE=1 PER_PAGE=2 dio 3164494 backups${NC}

Example response,
  ${LIGHT_GREEN}
  {
    \"backups\": [
      {
        \"id\": 7622989,
        \"name\": \"example.com 2014-11-14\",
        \"distribution\": \"Ubuntu\",
        \"slug\": null,
        \"public\": false,
        \"regions\": [
          \"nyc3\"
        ],
        \"created_at\": \"2014-11-14T16:07:38Z\",
        \"type\": \"snapshot\",
        \"min_disk_size\": 20
      }
    ],
    \"meta\": {
      \"total\": 1
    }
  }${NC}

"
}

help_droplet_actions()
{
  printf "%b" "${NC}
To retrieve all actions that have been executed on a Droplet

  ${LIGHT_GREEN}PAGE=n PER_PAGE=m dio <ID> actions${NC}

You can optionally set which page (defaults to 1) to display, and how many results tokenize
display per page (defaults to 25).

Example call,

  ${LIGHT_GREEN}PAGE=1 PER_PAGE=2 dio 3164494 kernels${NC}

Example response,
  ${LIGHT_GREEN}
  {
    \"actions\": [
      {
        \"id\": 36805187,
        \"status\": \"completed\",
        \"type\": \"snapshot\",
        \"started_at\": \"2014-11-14T16:37:34Z\",
        \"completed_at\": \"2014-11-14T16:39:32Z\",
        \"resource_id\": 3164494,
        \"resource_type\": \"droplet\",
        \"region\": \"nyc3\",
        \"region_slug\": \"nyc3\"
      }
    ],
    \"links\": {
      \"pages\": {
        \"last\": \"https://api.digitalocean.com/v2/droplets/3164494/actions?page=3&per_page=1\",
        \"next\": \"https://api.digitalocean.com/v2/droplets/3164494/actions?page=2&per_page=1\"
      }
    },
    \"meta\": {
      \"total\": 3
    }
  }${NC}

"
}

help_droplet_delete()
{
  printf "%b" "${NC}
To delete a Droplet

  ${LIGHT_GREEN}dio delete <ID>${NC}

For example,

  ${LIGHT_GREEN}dio delete 3164494${NC}

"
}

help_droplet_neighbors()
{
  printf "%b" "${NC}
To retrieve a list of droplets that are running on the same physical server

  ${LIGHT_GREEN}dio <ID> neighbors${NC}

To retrieve a list of any droplets that are running on the same physical hardware

  ${LIGHT_GREEN}dio neighbors${NC}

Example call,

  ${LIGHT_GREEN}dio 3164494 neighbors${NC}

You may also use the Canadian spelling, for example

  ${LIGHT_GREEN}dio 3164494 neighbours${NC}

Example response,
  ${LIGHT_GREEN}
  {
    \"droplets\": [
      {
        \"id\": 3164444,
        \"name\": \"example.com\",
        \"memory\": 512,
        \"vcpus\": 1,
        \"disk\": 20,
        \"locked\": false,
        \"status\": \"active\",
        \"kernel\": {
          \"id\": 2233,
          \"name\": \"Ubuntu 14.04 x64 vmlinuz-3.13.0-37-generic\",
          \"version\": \"3.13.0-37-generic\"
        },
        \"created_at\": \"2014-11-14T16:29:21Z\",
        \"features\": [
          \"backups\",
          \"ipv6\",
          \"virtio\"
        ],
        \"backup_ids\": [
          7938002
        ],
        \"snapshot_ids\": [

        ],
        \"image\": {
          \"id\": 6918990,
          \"name\": \"14.04 x64\",
          \"distribution\": \"Ubuntu\",
          \"slug\": \"ubuntu-14-04-x64\",
          \"public\": true,
          \"regions\": [
            \"nyc1\",
            \"ams1\",
            \"sfo1\",
            \"nyc2\",
            \"ams2\",
            \"sgp1\",
            \"lon1\",
            \"nyc3\",
            \"ams3\",
            \"nyc3\"
          ],
          \"created_at\": \"2014-10-17T20:24:33Z\",
          \"type\": \"snapshot\",
          \"min_disk_size\": 20
        },
        \"size\": {
        },
        \"size_slug\": \"512mb\",
        \"networks\": {
          \"v4\": [
            {
              \"ip_address\": \"104.236.32.182\",
              \"netmask\": \"255.255.192.0\",
              \"gateway\": \"104.236.0.1\",
              \"type\": \"public\"
            }
          ],
          \"v6\": [
            {
              \"ip_address\": \"2604:A880:0800:0010:0000:0000:02DD:4001\",
              \"netmask\": 64,
              \"gateway\": \"2604:A880:0800:0010:0000:0000:0000:0001\",
              \"type\": \"public\"
            }
          ]
        },
        \"region\": {
          \"name\": \"New York 3\",
          \"slug\": \"nyc3\",
          \"sizes\": [

          ],
          \"features\": [
            \"virtio\",
            \"private_networking\",
            \"backups\",
            \"ipv6\",
            \"metadata\"
          ],
          \"available\": null
        }
      }
    ]
  }${NC}

Example call,

  ${LIGHT_GREEN}dio neighbors${NC}

You may also use the Canadian spelling, for example

  ${LIGHT_GREEN}dio neighbours${NC}

Example response,
  ${LIGHT_GREEN}
  [
    {
      \"neighbors\": [
        [
          {
            \"id\": 3164444,
            \"name\": \"example.com\",
            \"memory\": 512,
            \"vcpus\": 1,
            \"disk\": 20,
            \"locked\": false,
            \"status\": \"active\",
            \"kernel\": {
              \"id\": 2233,
              \"name\": \"Ubuntu 14.04 x64 vmlinuz-3.13.0-37-generic\",
              \"version\": \"3.13.0-37-generic\"
            },
            \"created_at\": \"2014-11-14T16:29:21Z\",
            \"features\": [
              \"backups\",
              \"ipv6\",
              \"virtio\"
            ],
            \"backup_ids\": [
              7938002
            ],
            \"snapshot_ids\": [

            ],
            \"image\": {
              \"id\": 6918990,
              \"name\": \"14.04 x64\",
              \"distribution\": \"Ubuntu\",
              \"slug\": \"ubuntu-14-04-x64\",
              \"public\": true,
              \"regions\": [
                \"nyc1\",
                \"ams1\",
                \"sfo1\",
                \"nyc2\",
                \"ams2\",
                \"sgp1\",
                \"lon1\",
                \"nyc3\",
                \"ams3\",
                \"nyc3\"
              ],
              \"created_at\": \"2014-10-17T20:24:33Z\",
              \"type\": \"snapshot\",
              \"min_disk_size\": 20
            },
            \"size\": {
            },
            \"size_slug\": \"512mb\",
            \"networks\": {
              \"v4\": [
                {
                  \"ip_address\": \"104.236.32.182\",
                  \"netmask\": \"255.255.192.0\",
                  \"gateway\": \"104.236.0.1\",
                  \"type\": \"public\"
                }
              ],
              \"v6\": [
                {
                  \"ip_address\": \"2604:A880:0800:0010:0000:0000:02DD:4001\",
                  \"netmask\": 64,
                  \"gateway\": \"2604:A880:0800:0010:0000:0000:0000:0001\",
                  \"type\": \"public\"
                }
              ]
            },
            \"region\": {
              \"name\": \"New York 3\",
              \"slug\": \"nyc3\",
              \"sizes\": [

              ],
              \"features\": [
                \"virtio\",
                \"private_networking\",
                \"backups\",
                \"ipv6\",
                \"metadata\"
              ],
              \"available\": null
            }
          }
        ]
      ]
    }
  ]${NC}

"
}

help_droplet_upgrades()
{
  printf "%b" "${NC}
To retrieve a list of droplets that are scheduled to be upgraded

  ${LIGHT_GREEN}dio upgrades${NC}

Example response,

  ${LIGHT_GREEN}
  [
    {
      \"droplet_id\": 123,
      \"date_of_migration\": \"2014-12-01T12:00:00Z\",
      \"url\": \"https://api.digitalocean.com/v2/droplets/123\"
    }
  ]${NC}

"
}

help_images()
{
  printf "%b" "${NC}
To list all of the images available on your account

  ${LIGHT_GREEN}dio images${NC}

Example response,

  ${LIGHT_GREEN}
  {
    \"images\": [
      {
        \"id\": 7555620,
        \"name\": \"Nifty New Snapshot\",
        \"distribution\": \"Ubuntu\",
        \"slug\": null,
        \"public\": false,
        \"regions\": [
          \"nyc2\",
          \"nyc2\"
        ],
        \"created_at\": \"2014-11-04T22:23:02Z\",
        \"type\": \"snapshot\",
        \"min_disk_size\": 20
      }
    ],
    \"links\": {
      \"pages\": {
        \"last\": \"https://api.digitalocean.com/v2/images?page=56&per_page=1\",
        \"next\": \"https://api.digitalocean.com/v2/images?page=2&per_page=1\"
      }
    },
    \"meta\": {
      \"total\": 56
    }
  }${NC}

"
}

#--------------------
# JSON PARSER
#--------------------

awk_egrep () {
  local pattern_string=$1

  gawk '{
    while ($0) {
      start=match($0, pattern);
      token=substr($0, start, RLENGTH);
      print token;
      $0=substr($0, start+RLENGTH);
    }
  }' pattern="$pattern_string"
}

process()
{
  echo $1 | tokenize | parse
}

tokenize () {
  local GREP
  local ESCAPE
  local CHAR

  if echo "test string" | egrep -ao --color=never "test" &>/dev/null
  then
    GREP='egrep -ao --color=never'
  else
    GREP='egrep -ao'
  fi

  if echo "test string" | egrep -o "test" &>/dev/null
  then
    ESCAPE='(\\[^u[:cntrl:]]|\\u[0-9a-fA-F]{4})'
    CHAR='[^[:cntrl:]"\\]'
  else
    GREP=awk_egrep
    ESCAPE='(\\\\[^u[:cntrl:]]|\\u[0-9a-fA-F]{4})'
    CHAR='[^[:cntrl:]"\\\\]'
  fi

  local STRING="\"$CHAR*($ESCAPE$CHAR*)*\""
  local NUMBER='-?(0|[1-9][0-9]*)([.][0-9]*)?([eE][+-]?[0-9]*)?'
  local KEYWORD='null|false|true'
  local SPACE='[[:space:]]+'

  $GREP "$STRING|$NUMBER|$KEYWORD|$SPACE|." | egrep -v "^$SPACE$"
}

parse_array () {
  local index=0
  local ary=''
  read -r token
  case "$token" in
    ']') ;;
    *)
      while :
      do
        parse_value "$1" "$index"
        index=$((index+1))
        ary="$ary""$value"
        read -r token
        case "$token" in
          ']') break ;;
          ',') ary="$ary," ;;
          *) throw "EXPECTED , or ] GOT ${token:-EOF}" ;;
        esac
        read -r token
      done
      ;;
  esac
  [ "$BRIEF" -eq 0 ] && value=$(printf '[%s]' "$ary") || value=
  :
}

parse_object () {
  local key
  local obj=''
  read -r token
  case "$token" in
    '}') ;;
    *)
      while :
      do
        case "$token" in
          '"'*'"') key=$token ;;
          *) throw "EXPECTED string GOT ${token:-EOF}" ;;
        esac
        read -r token
        case "$token" in
          ':') ;;
          *) throw "EXPECTED : GOT ${token:-EOF}" ;;
        esac
        read -r token
        parse_value "$1" "$key"
        obj="$obj$key:$value"
        read -r token
        case "$token" in
          '}') break ;;
          ',') obj="$obj," ;;
          *) throw "EXPECTED , or } GOT ${token:-EOF}" ;;
        esac
        read -r token
      done
    ;;
  esac
  [ "$BRIEF" -eq 0 ] && value=$(printf '{%s}' "$obj") || value=
  :
}

parse_value () {
  local jpath="${1:+$1,}$2" isleaf=0 isempty=0 print=0
  case "$token" in
    '{') parse_object "$jpath" ;;
    '[') parse_array  "$jpath" ;;
    # At this point, the only valid single-character tokens are digits.
    ''|[!0-9]) throw "EXPECTED value GOT ${token:-EOF}" ;;
    *) value=$token
       # if asked, replace solidus ("\/") in json strings with normalized value: "/"
       [ "$NORMALIZE_SOLIDUS" -eq 1 ] && value=${value//\\\//\/}
       isleaf=1
       [ "$value" = '""' ] && isempty=1
       ;;
  esac
  [ "$value" = '' ] && return
  [ "$LEAFONLY" -eq 0 ] && [ "$PRUNE" -eq 0 ] && print=1
  [ "$LEAFONLY" -eq 1 ] && [ "$isleaf" -eq 1 ] && [ $PRUNE -eq 0 ] && print=1
  [ "$LEAFONLY" -eq 0 ] && [ "$PRUNE" -eq 1 ] && [ "$isempty" -eq 0 ] && print=1
  [ "$LEAFONLY" -eq 1 ] && [ "$isleaf" -eq 1 ] && \
    [ $PRUNE -eq 1 ] && [ $isempty -eq 0 ] && print=1
  [ "$print" -eq 1 ] && printf "[%s]\t%s\n" "$jpath" "$value"
  :
}

parse () {
  read -r token
  parse_value
  read -r token
  case "$token" in
    '') ;;
    *) throw "EXPECTED EOF GOT $token" ;;
  esac
}

BRIEF=1
LEAFONLY=1
PRUNE=1
NORMALIZE_SOLIDUS=1


#--------------------
# API CALLS
#--------------------

curl_call()
{
  local METHOD=$1
  local URL_PATH=$2

  local TOKEN=${TOKEN}
  local LOGFILE=${LOGFILE-/tmp/dio.log}

  debug "About to $METHOD $API_URL/$URL_PATH"
  local ANSWER=$(curl -X $METHOD $API_URL/$URL_PATH \
                 -H "Authorization: Bearer $TOKEN" \
                 -H "Content-Type: application/json" 2> $LOGFILE)
  echo $ANSWER
}

get_call()
{
  curl_call "GET" "$1"
}

show_call()
{
  ANSWER=$(get_call "$1")
  handle_error $? "$ANSWER" "$2"
  OUTPUT=$(process "$ANSWER")
  notify "$OUTPUT\n"
}



delete_call()
{
  curl_call "DELETE" "$1"
}

post_action()
{
  local ACTION=$2
  local TOKEN=${TOKEN}
  local LOGFILE=${LOGFILE-/tmp/dio.log}

  local ANSWER=$(curl -X POST $API_URL/$1 \
                 -d "{\"type\": \"$ACTION\"}" \
                 -H "Authorization: Bearer $TOKEN" \
                 -H "Content-Type: application/json" 2> $LOGFILE)
  echo $ANSWER
}

read_config()
{
  if [[ -e ".dio" ]]; then
    debug "Reading in configs from .dio in current directory"
    . .dio
  elif [[ -e "$HOME/.dio" ]]; then
    debug "Reading in configs from .dio in $HOME/.dio"
    . $HOME/.dio
  else
    debug "No .dio file, skippping"
  fi
}

verify_token()
{
  if [[ "$1" = "" ]]; then
    warn "\nWe were unable to find your Digital Ocean TOKEN, PLEASE TAKE ACTION BELOW.\n"
    info "To provide you token you have have a few options...\n"
    info "  1) Create a .dio config file and edit it to contain your token.\n"
    info "     e.g. ${LIGHT_GREEN}dio init${NC}"
    info "          ${LIGHT_GREEN}echo \"TOKEN=983339f14aaaxx94ex6xd89f17797af8f33fd9f39f8ff1xx74397ef83d791787\" >> .dio${NC}\n"
    info "  2) Put your <TOKEN VALUE> in a TOKEN variable"
    info "     e.g. ${LIGHT_GREEN}TOKEN=983339f14aaaxx94ex6xd89f17797af8f33fd9f39f8ff1xx74397ef83d791787 dio list keys${NC}"
    info "\nIf you have no idea what we are talking about, please check out:"
    info "   https://www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-api-v2"
    info "\nPlease note that 983339f14aaaxx94ex6xd89f17797af8f33fd9f39f8ff1xx74397ef83d791787 is only an example,"
    info "and your token will be much different"
    info "\n"
    exit 1
  fi
}

#--------------------
# API HELPER FUNCTIONS
#--------------------

do_domain()
{
  case "$1" in
  "create")
    shift
    domain_create $@
    ;;
  "delete")
    shift
    info "About to delete domain $1 ..."
    delete_call "domains/$1"
    ;;
  *)
    show_call "domains/$1" "Unable to load information about $1"
    ;;
  esac
}

domain_create()
{
  NAME=$1
  IP=$2

  TOKEN=${TOKEN}
  LOGFILE=${LOGFILE-/tmp/dio.log}

  verify_token $TOKEN
  info "Creating a domain $NAME ($IP)"
  ANSWER=$(curl -X POST $API_URL/domains \
           -d "{\"name\":\"$NAME\", \"ip_address\":\"$IP\"}" \
           -H "Authorization: Bearer $TOKEN" \
           -H "Content-Type: application/json" 2> $LOGFILE)
  handle_error $? "$ANSWER" "Unable to create domain $NAME ($IP)"
  OUTPUT=$(process "$ANSWER")
  info "$OUTPUT"
}

do_record()
{
  case "$1" in
  "create")
    shift
    record_create $@
    ;;
  "update")
    shift
    record_update $@
    ;;
  "delete")
    shift
    info "About to delete record $1 $2 ..."
    delete_call "domains/$1/records/$2"
    ;;
  *)
    show_call "domains/$1/records/$2" "Unable to load information about $1 $2"
    ;;
  esac
}

record_create()
{
  DOMAIN=$1
  TYPE=$2
  NAME=$3
  DATA=$4
  PRIORITY=${PRIORITY-null}
  PORT=${PORT-null}
  WEIGHT=${WEIGHT-null}

  TOKEN=${TOKEN}
  LOGFILE=${LOGFILE-/tmp/dio.log}

  verify_token $TOKEN
  info "Creating a record $TYPE $NAME $DATA ($DOMAIN)"
  debug "  -- type: $TYPE"
  debug "  -- name: $NAME"
  debug "  -- data: $DATA"
  debug "  -- priority: $PRIORITY"
  debug "  -- port: $PORT"
  debug "  -- weight: $WEIGHT"
  ANSWER=$(curl -X POST $API_URL/domains/$DOMAIN/records \
           -d "{\"type\":\"$TYPE\", \"name\":\"$NAME\", \"data\":\"$DATA\", \"priority\":\"$PRIORITY\", \"port\":\"$PORT\", \"weight\":\"$WEIGHT\"}" \
           -H "Authorization: Bearer $TOKEN" \
           -H "Content-Type: application/json" 2> $LOGFILE)
  handle_error $? "$ANSWER" "Unable to create record $TYPE $NAME $DATA ($DOMAIN)"
  OUTPUT=$(process "$ANSWER")
  info "$OUTPUT"
}

record_update()
{
  DOMAIN=$1
  ID=$2
  FIELD=$3
  VALUE=$4

  TOKEN=${TOKEN}
  LOGFILE=${LOGFILE-/tmp/dio.log}

  verify_token $TOKEN
  info "Updating a record $ID $FIELD=$VALUE ($DOMAIN)"
  ANSWER=$(curl -X PUT $API_URL/domains/$DOMAIN/records/$ID \
           -d "{\"$FIELD\":\"$VALUE\"}" \
           -H "Authorization: Bearer $TOKEN" \
           -H "Content-Type: application/json" 2> $LOGFILE)
  handle_error $? "$ANSWER" "Unable to update record $ID $FIELD=$VALUE ($DOMAIN)"
  OUTPUT=$(process "$ANSWER")
  info "$OUTPUT"
}

do_droplet()
{
  case "$2" in
  "kernels")
    show_call "droplets/$1/kernels?page=${PAGE-1}&per_page=${PER_PAGE-25}" "Unable to load kernels for Droplet $1"
    ;;
  "snapshots")
    show_call "droplets/$1/snapshots?page=${PAGE-1}&per_page=${PER_PAGE-25}" "Unable to load snapshots for Droplet $1"
    ;;
  "backups")
    show_call "droplets/$1/backups?page=${PAGE-1}&per_page=${PER_PAGE-25}" "Unable to load backups for Droplet $1"
    ;;
  "actions")
    show_call "droplets/$1/actions?page=${PAGE-1}&per_page=${PER_PAGE-25}" "Unable to load actions for Droplet $1"
    ;;
  "neighbors"|"neighbours")
    show_call "droplets/$1/neighbors?page=${PAGE-1}&per_page=${PER_PAGE-25}" "Unable to load neighbors for Droplet $1"
    ;;
  "active?")
    droplet_active $1
    ;;
  "ip")
    droplet_ip $1
    ;;

  *)
    case "$1" in
      "upgrades")
        show_call "droplet_upgrades" "Unable to load Droplets that scheduled for an upgrade"
        ;;
      *)
        ls_droplet "$1"
        ;;
    esac
  esac
}

droplet_create()
{
  TOKEN=${TOKEN}
  NAME=$1
  REGION=${REGION-tor1}
  SIZE=${SIZE-512mb}
  IMAGE=${IMAGE-ubuntu-14-04-x64}
  SSH_KEYS=${SSH_KEYS-""}
  BACKUPS=${BACKUPS-false}
  IPV6=${IPV6-true}
  USER_DATA=${USER_DATA-null}
  PRIVATE_NETWORKING=${PRIVATE_NETWORKING-true}
  LOGFILE=${LOGFILE-/tmp/dio.log}

  verify_token $TOKEN

  if [[ "$SSH_KEYS" = "" ]]; then
    SSH_OUTPUT=""
  else
    SSH_OUTPUT="\"ssh_keys\": $SSH_KEYS, "
  fi

  info "Creating a new droplet $NAME ($REGION, $SIZE, $IMAGE)"

  debug "  -- NAME=$NAME"
  debug "  -- REGION=$REGION"
  debug "  -- SIZE=$SIZE"
  debug "  -- IMAGE=$IMAGE"
  debug "  -- SSH_KEYS=$SSH_KEYS"
  debug "  -- BACKUPS=$BACKUPS"
  debug "  -- IPV6=$IPV6"
  debug "  -- USER_DATA=$USER_DATA"
  debug "  -- PRIVATE_NETWORKING=$PRIVATE_NETWORKING"
  ANSWER=$(curl -X POST $API_URL/droplets \
           -d "{\"name\":\"$NAME\", \"region\":\"$REGION\",\"size\":\"$SIZE\",\"image\":\"$IMAGE\", $SSH_OUTPUT\"backups\": $BACKUPS, \"ipv6\": $IPV6, \"user_data\": $USER_DATA, \"private_networking\": $PRIVATE_NETWORKING}" \
           -H "Authorization: Bearer $TOKEN" \
           -H "Content-Type: application/json" 2> $LOGFILE)

  handle_error $? "$ANSWER" "Unable to create droplet $NAME ($REGION, $SIZE, $IMAGE)"
  OUTPUT=$(process "$ANSWER" | grep 'id\|name'  | grep -v 'kernel' | grep -v 'image' | grep -v 'region' | grep -v 'action' | awk -F' ' '{print $2}')

  info "$OUTPUT"
}

droplet_delete()
{
  info "About to delete droplet $1 ..."
  delete_call "droplets/$1"
}

droplet_status()
{
  local ID=$1
  ANSWER=$(get_call "droplets/$ID")
  handle_error $? "$ANSWER" "Unable to list droplet $ID"
  OUTPUT=$(process "$ANSWER" | grep 'status' | awk -F' ' '{print $2}' | sed -e 's/^"//'  -e 's/"$//')
  echo $OUTPUT
}

droplet_active()
{
  local STATUS=$(droplet_status $1)
  if [[ "$STATUS" == "active" ]]; then
    echo "true"
  else
    echo "false"
  fi
}

droplet_block_until()
{
  local ID=$1
  local STATUS=$2
  while [[ "$(droplet_status $ID)" != "$STATUS" ]]; do
    sleep 10
  done
}

do_snapshot()
{
  ID=$1
  NAME=$2
  TOKEN=${TOKEN}
  LOGFILE=${LOGFILE-/tmp/dio.log}

  verify_token $TOKEN

  info "Creating a snapshot $NAME ($ID)"

  ANSWER=$(curl -X POST $API_URL/droplets/$ID/actions \
           -d "{\"type\":\"snapshot\", \"name\":\"$NAME\"}" \
           -H "Authorization: Bearer $TOKEN" \
           -H "Content-Type: application/json" 2> $LOGFILE)

  handle_error $? "$ANSWER" "Unable to create droplet $NAME ($REGION, $SIZE, $IMAGE)"
  OUTPUT=$(process "$ANSWER")
  info "$OUTPUT"
}

do_list()
{
  verify_token $TOKEN
  ITEM=${1-droplets}
  debug "Looking up $ITEM"
  case "$ITEM" in
  "droplets")
    ls_droplets
    ;;
  "keys")
    ls_keys
    ;;
  esac
}

do_info()
{
  ID=$1
  ANSWER=$(get_call "droplets/$ID")
  handle_error $? "$ANSWER" "Unable to get info about droplet $ID"
  OUTPUT=$(process "$ANSWER")
  notify "$OUTPUT\n"
}

ls_droplets()
{
  ANSWER=$(get_call "droplets")
  handle_error $? "$ANSWER" "Unable to list droplets"
  OUTPUT=$(process "$ANSWER" | grep 'id\|name\|status' | grep -v 'kernel' | grep -v 'image' | grep -v 'region' | awk -F' ' '{print $2}')

  notify "\nAvailable Droplets:\n"
  notify "$OUTPUT\n"
}

ls_droplet()
{
  local ID=$1
  ANSWER=$(get_call "droplets/$ID")
  handle_error $? "$ANSWER" "Unable to list droplet $ID"
  OUTPUT=$(process "$ANSWER" | grep 'id\|name\|status' | grep -v 'kernel' | grep -v 'image' | grep -v 'region' | awk -F' ' '{print $2}')

  notify "\nDroplet Info ($ID):\n"
  notify "$OUTPUT\n"
}

ls_keys()
{
  ANSWER=$(get_call "account/keys")
  handle_error $? "$ANSWER" "Unable to list keys"
  OUTPUT=$(process "$ANSWER" | grep 'id\|name' | awk -F' ' '{print $2}')

  notify "\nAvailable SSH Keys Include:\n"
  notify "$OUTPUT\n"
}

ls_images()
{
  ANSWER=$(get_call "images?page=1&per_page=100&private=true")
  handle_error $? "$ANSWER" "Unable to list images"
  OUTPUT=$(process "$ANSWER")

  notify "\nAvailable Images:\n"
  notify "$OUTPUT\n"
}

do_power()
{
  ON_OR_OFF=$1
  ID=$2
  ANSWER=$(post_action droplets/$ID/actions "power_$ON_OR_OFF")
  OUTPUT=$(process "$ANSWER")
  notify "$OUTPUT\n"
}

droplet_ip()
{
  ID=$1
  ANSWER=$(get_call "droplets/$ID")
  process "$ANSWER" | grep 'networks' | grep 'v4' | grep 'ip_address' | grep ',1,' | awk -F' ' '{print $2}' | sed -e 's/^"//'  -e 's/"$//'
}

do_ssh()
{
  ID=$1
  shift
  IP=$(droplet_ip $ID)
  debug "Calling ssh root@$IP"
  ssh root@$IP $@
}

do_scp()
{
  ID=$1
  LOCAL_FILE=$2
  REMOTE_FILE=${3-$LOCAL_FILE}

  IP=$(droplet_ip $ID)
  debug "Calling scp $LOCAL_FILE root@$IP:$REMOTE_FILE"
  scp $LOCAL_FILE root@$IP:$REMOTE_FILE
}

do_init()
{

  if [[ -e ".dio" ]]; then
    warn "dio already initialized, take a look in .dio"
  else
  info "Initalizing dio..."
printf "%b" "# dio $VERSION
# Provide your Digital Ocean TOKEN
# https://www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-api-v2
#
# TOKEN=XXXX
#
# You can provide your desired SSH_KEY ID for password login
# https://developers.digitalocean.com/documentation/v2/#ssh-keys
#
# You can get more information about your keys by running
#  > dio list keys
#
# It should be provided as a list, do don't forget your square brackets
# SSH_KEYS=[1234, 4567]
" > ".dio"
  fi

}

do_test()
{
  set -euo pipefail ; IFS=$'\n\t'
  info "Testing all non invasions calls"

  info " :::: Account :::"
  dio account 2>/dev/null 1>&2
  dio help account 2>/dev/null 1>&2

  info " :::: Actions :::"
  dio actions 2>/dev/null 1>&2
  dio help actions 2>/dev/null 1>&2
  dio help action 2>/dev/null 1>&2

  info " :::: Domains :::"
  dio domains 2>/dev/null 1>&2
  dio help domains 2>/dev/null 1>&2
  dio help domain 2>/dev/null 1>&2
  dio help domain create 2>/dev/null 1>&2
  dio help domain delete 2>/dev/null 1>&2

  info " :::: Domain Records :::"
  dio records 2>/dev/null 1>&2
  dio help records 2>/dev/null 1>&2
  dio help record 2>/dev/null 1>&2
  dio help record create 2>/dev/null 1>&2
  dio help record update 2>/dev/null 1>&2
  dio help record delete 2>/dev/null 1>&2

  info " :::: Droplets :::"
  dio ls 2>/dev/null 1>&2
  dio help ls 2>/dev/null 1>&2
  dio kernels 2>/dev/null 1>&2
  dio help kernels 2>/dev/null 1>&2
  dio snapshots 2>/dev/null 1>&2
  dio help snapshots 2>/dev/null 1>&2
  dio backups 2>/dev/null 1>&2
  dio help backups 2>/dev/null 1>&2
  dio neighbors 2>/dev/null 1>&2
  dio neighbours 2>/dev/null 1>&2
  dio help neighbors 2>/dev/null 1>&2
  dio help neighbours 2>/dev/null 1>&2
  dio upgrades 2>/dev/null 1>&2
  dio help upgrades 2>/dev/null 1>&2
  dio help create 2>/dev/null 1>&2
  dio help delete 2>/dev/null 1>&2

  info " :::: Help :::"
  dio help 2>/dev/null 1>&2
  info "DONE, Testing all non invasions calls"
}

do_replace_self()
{
  current_dio_filename=$(which dio)
  CURLOPT_FRESH_CONNECT=true curl -s -o $current_dio_filename https://raw.githubusercontent.com/capbash/dio/master/dio
}

do_update_self()
{
  current_dio_filename=$(which dio)
  tmp_dio_filename=$current_dio_filename.old
  cp $current_dio_filename $tmp_dio_filename
  OLD_VERSION=$(internal_version $current_dio_filename)
  info "Updating from $OLD_VERSION to latest version of dio in ${current_dio_filename}"
  debug "The old version will be stored at $tmp_dio_filename"
  info "When done run '${BLUE}dio version${NC}' for the new version."
  $tmp_dio_filename replace-self &
}

#--------------------
# COMMAND LINE PARSER
#--------------------

cli()
{
  case "$1" in

  # -----------------
  # Account
  # + Get User Information
  # https://developers.digitalocean.com/documentation/v2/#account
  # -----------------
  "account")
    show_call "account" "Unable to load your account information."
    ;;

  # -----------------
  # Actions
  # + List All Actions
  # + Retrieve an existing Action
  # https://developers.digitalocean.com/documentation/v2/#actions
  # -----------------
  "actions")
    show_call "actions?page=${PAGE-1}" "Unable to load your actions."
    ;;
  "action")
    show_call "actions/$2" "Unable to load action $2."
    ;;

  # -----------------
  # Domains
  # + List All Domains
  # + Create a new Domain
  # + Retrieve an existing Domain
  # + Delete a Domain
  # https://developers.digitalocean.com/documentation/v2/#domains
  # -----------------
  "domains")
    show_call "domains" "Unable to load your domains."
    ;;
  "domain")
    shift
    do_domain $@
    ;;

  # -----------------
  # Domain Records
  # + List All Domain Records
  # + Create a new Domain Record
  # + Retrieve an existing Domain Record
  # + Update a Domain Record
  # + Delete a Domain Record
  # https://developers.digitalocean.com/documentation/v2/#domains
  # -----------------
  "records")
    show_call "domains/$2/records" "Unable to load domain records for $2."
    ;;
  "record")
    shift
    do_record $@
    ;;

  # -----------------
  # Droplets
  # + Create a new Droplet
  # + List All Droplets
  # + Delete a Droplet
  # https://developers.digitalocean.com/documentation/v2/#droplets
  # -----------------
  "create")
    shift
    droplet_create $@
    ;;
  "ls"|"droplets")
    ls_droplets
    ;;
  "delete")
    shift
    droplet_delete $@
    ;;


  "snapshot")
    do_snapshot $2 $3
    ;;
  "regions")
    show_call "regions" "Unable to load DigitalOcean regions."
    ;;
  "sizes")
    show_call "sizes" "Unable to load DigitalOcean sizes."
    ;;
  "init")
    do_init
    ;;
  "power")
    do_power $2 $3
    ;;
  "list")
    do_list $2
    ;;
  "info")
    do_info $2
    ;;
  "help")
    shift
    do_help $@
    ;;
  "version")
    echo -e "${BLUE}dio ${VERSION}${NC}"
    exit 0
    ;;

  "ssh")
    shift
    do_ssh $@
    ;;
  "scp")
    shift
    do_scp $@
    ;;

  "block-until")
    shift
    droplet_block_until $@
    ;;

  "replace-self")
    do_replace_self
    ;;

  "update-self")
    do_update_self
    ;;

  "test")
    shift
    do_test $@
    ;;

  # -----------------
  # Droplets
  # + List all images
  # https://developers.digitalocean.com/documentation/v2/#images
  # -----------------
  "images")
    ls_images
    ;;


  "")
    help_usage
    exit 0
    ;;


  # -----------------
  # Droplets
  # + Retrieve an existing Droplet by Id
  # + List available Kernels for a Droplet
  # + List snapshots for a Droplet
  # + List backups for a Droplet
  # + List actions for a Droplet
  # + List Neighbors for a Droplet
  # + List all Droplet Neighbors
  # + List Droplet Upgrades
  # + Additional queries
  # https://developers.digitalocean.com/documentation/v2/#droplets
  # -----------------
  *)
    do_droplet $@
    ;;
  esac

}

read_config
cli $@
